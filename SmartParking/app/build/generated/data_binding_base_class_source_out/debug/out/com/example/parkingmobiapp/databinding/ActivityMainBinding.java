// Generated by view binder compiler. Do not edit!
package com.example.parkingmobiapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.parkingmobiapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnRefreshParking;

  @NonNull
  public final ImageView ivSettings;

  @NonNull
  public final ImageView ivStatusIcon;

  @NonNull
  public final LinearLayout llNoNotifications;

  @NonNull
  public final LinearLayout llNotificationsContainer;

  @NonNull
  public final LinearLayout llParkingHistory;

  @NonNull
  public final LinearLayout llParkingInfo;

  @NonNull
  public final LinearLayout llReportIssue;

  @NonNull
  public final LinearLayout llSettings;

  @NonNull
  public final ProgressBar progressParkingOccupancy;

  @NonNull
  public final TextView tvAvailableSpaces;

  @NonNull
  public final TextView tvConnectionStatus;

  @NonNull
  public final TextView tvCurrentStatus;

  @NonNull
  public final TextView tvLastUpdate;

  @NonNull
  public final TextView tvParkingAvailable;

  @NonNull
  public final TextView tvParkingOccupied;

  @NonNull
  public final TextView tvParkingPercentage;

  @NonNull
  public final TextView tvParkingStatusMessage;

  @NonNull
  public final TextView tvParkingTotal;

  @NonNull
  public final TextView tvUserPlate;

  @NonNull
  public final TextView tvViewAllNotifications;

  @NonNull
  public final View viewConnectionIndicator;

  @NonNull
  public final View viewParkingIndicator;

  private ActivityMainBinding(@NonNull ScrollView rootView, @NonNull Button btnRefreshParking,
      @NonNull ImageView ivSettings, @NonNull ImageView ivStatusIcon,
      @NonNull LinearLayout llNoNotifications, @NonNull LinearLayout llNotificationsContainer,
      @NonNull LinearLayout llParkingHistory, @NonNull LinearLayout llParkingInfo,
      @NonNull LinearLayout llReportIssue, @NonNull LinearLayout llSettings,
      @NonNull ProgressBar progressParkingOccupancy, @NonNull TextView tvAvailableSpaces,
      @NonNull TextView tvConnectionStatus, @NonNull TextView tvCurrentStatus,
      @NonNull TextView tvLastUpdate, @NonNull TextView tvParkingAvailable,
      @NonNull TextView tvParkingOccupied, @NonNull TextView tvParkingPercentage,
      @NonNull TextView tvParkingStatusMessage, @NonNull TextView tvParkingTotal,
      @NonNull TextView tvUserPlate, @NonNull TextView tvViewAllNotifications,
      @NonNull View viewConnectionIndicator, @NonNull View viewParkingIndicator) {
    this.rootView = rootView;
    this.btnRefreshParking = btnRefreshParking;
    this.ivSettings = ivSettings;
    this.ivStatusIcon = ivStatusIcon;
    this.llNoNotifications = llNoNotifications;
    this.llNotificationsContainer = llNotificationsContainer;
    this.llParkingHistory = llParkingHistory;
    this.llParkingInfo = llParkingInfo;
    this.llReportIssue = llReportIssue;
    this.llSettings = llSettings;
    this.progressParkingOccupancy = progressParkingOccupancy;
    this.tvAvailableSpaces = tvAvailableSpaces;
    this.tvConnectionStatus = tvConnectionStatus;
    this.tvCurrentStatus = tvCurrentStatus;
    this.tvLastUpdate = tvLastUpdate;
    this.tvParkingAvailable = tvParkingAvailable;
    this.tvParkingOccupied = tvParkingOccupied;
    this.tvParkingPercentage = tvParkingPercentage;
    this.tvParkingStatusMessage = tvParkingStatusMessage;
    this.tvParkingTotal = tvParkingTotal;
    this.tvUserPlate = tvUserPlate;
    this.tvViewAllNotifications = tvViewAllNotifications;
    this.viewConnectionIndicator = viewConnectionIndicator;
    this.viewParkingIndicator = viewParkingIndicator;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_refresh_parking;
      Button btnRefreshParking = ViewBindings.findChildViewById(rootView, id);
      if (btnRefreshParking == null) {
        break missingId;
      }

      id = R.id.iv_settings;
      ImageView ivSettings = ViewBindings.findChildViewById(rootView, id);
      if (ivSettings == null) {
        break missingId;
      }

      id = R.id.iv_status_icon;
      ImageView ivStatusIcon = ViewBindings.findChildViewById(rootView, id);
      if (ivStatusIcon == null) {
        break missingId;
      }

      id = R.id.ll_no_notifications;
      LinearLayout llNoNotifications = ViewBindings.findChildViewById(rootView, id);
      if (llNoNotifications == null) {
        break missingId;
      }

      id = R.id.ll_notifications_container;
      LinearLayout llNotificationsContainer = ViewBindings.findChildViewById(rootView, id);
      if (llNotificationsContainer == null) {
        break missingId;
      }

      id = R.id.ll_parking_history;
      LinearLayout llParkingHistory = ViewBindings.findChildViewById(rootView, id);
      if (llParkingHistory == null) {
        break missingId;
      }

      id = R.id.ll_parking_info;
      LinearLayout llParkingInfo = ViewBindings.findChildViewById(rootView, id);
      if (llParkingInfo == null) {
        break missingId;
      }

      id = R.id.ll_report_issue;
      LinearLayout llReportIssue = ViewBindings.findChildViewById(rootView, id);
      if (llReportIssue == null) {
        break missingId;
      }

      id = R.id.ll_settings;
      LinearLayout llSettings = ViewBindings.findChildViewById(rootView, id);
      if (llSettings == null) {
        break missingId;
      }

      id = R.id.progress_parking_occupancy;
      ProgressBar progressParkingOccupancy = ViewBindings.findChildViewById(rootView, id);
      if (progressParkingOccupancy == null) {
        break missingId;
      }

      id = R.id.tv_available_spaces;
      TextView tvAvailableSpaces = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailableSpaces == null) {
        break missingId;
      }

      id = R.id.tv_connection_status;
      TextView tvConnectionStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvConnectionStatus == null) {
        break missingId;
      }

      id = R.id.tv_current_status;
      TextView tvCurrentStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentStatus == null) {
        break missingId;
      }

      id = R.id.tv_last_update;
      TextView tvLastUpdate = ViewBindings.findChildViewById(rootView, id);
      if (tvLastUpdate == null) {
        break missingId;
      }

      id = R.id.tv_parking_available;
      TextView tvParkingAvailable = ViewBindings.findChildViewById(rootView, id);
      if (tvParkingAvailable == null) {
        break missingId;
      }

      id = R.id.tv_parking_occupied;
      TextView tvParkingOccupied = ViewBindings.findChildViewById(rootView, id);
      if (tvParkingOccupied == null) {
        break missingId;
      }

      id = R.id.tv_parking_percentage;
      TextView tvParkingPercentage = ViewBindings.findChildViewById(rootView, id);
      if (tvParkingPercentage == null) {
        break missingId;
      }

      id = R.id.tv_parking_status_message;
      TextView tvParkingStatusMessage = ViewBindings.findChildViewById(rootView, id);
      if (tvParkingStatusMessage == null) {
        break missingId;
      }

      id = R.id.tv_parking_total;
      TextView tvParkingTotal = ViewBindings.findChildViewById(rootView, id);
      if (tvParkingTotal == null) {
        break missingId;
      }

      id = R.id.tv_user_plate;
      TextView tvUserPlate = ViewBindings.findChildViewById(rootView, id);
      if (tvUserPlate == null) {
        break missingId;
      }

      id = R.id.tv_view_all_notifications;
      TextView tvViewAllNotifications = ViewBindings.findChildViewById(rootView, id);
      if (tvViewAllNotifications == null) {
        break missingId;
      }

      id = R.id.view_connection_indicator;
      View viewConnectionIndicator = ViewBindings.findChildViewById(rootView, id);
      if (viewConnectionIndicator == null) {
        break missingId;
      }

      id = R.id.view_parking_indicator;
      View viewParkingIndicator = ViewBindings.findChildViewById(rootView, id);
      if (viewParkingIndicator == null) {
        break missingId;
      }

      return new ActivityMainBinding((ScrollView) rootView, btnRefreshParking, ivSettings,
          ivStatusIcon, llNoNotifications, llNotificationsContainer, llParkingHistory,
          llParkingInfo, llReportIssue, llSettings, progressParkingOccupancy, tvAvailableSpaces,
          tvConnectionStatus, tvCurrentStatus, tvLastUpdate, tvParkingAvailable, tvParkingOccupied,
          tvParkingPercentage, tvParkingStatusMessage, tvParkingTotal, tvUserPlate,
          tvViewAllNotifications, viewConnectionIndicator, viewParkingIndicator);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
