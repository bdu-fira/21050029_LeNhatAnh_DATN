// Generated by view binder compiler. Do not edit!
package com.example.parkingmobiapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.parkingmobiapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNotificationHistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnRefreshNotifications;

  @NonNull
  public final TextView chipFilterAll;

  @NonNull
  public final TextView chipFilterSpaceAvailable;

  @NonNull
  public final TextView chipFilterSystem;

  @NonNull
  public final TextView chipFilterWrongPosition;

  @NonNull
  public final ImageView ivBackButton;

  @NonNull
  public final ImageView ivClearAll;

  @NonNull
  public final LinearLayout llEmptyState;

  @NonNull
  public final LinearLayout llExportNotifications;

  @NonNull
  public final LinearLayout llLoadingState;

  @NonNull
  public final LinearLayout llMarkAllRead;

  @NonNull
  public final RecyclerView rvNotifications;

  @NonNull
  public final TextView tvNotificationCount;

  private ActivityNotificationHistoryBinding(@NonNull LinearLayout rootView,
      @NonNull Button btnRefreshNotifications, @NonNull TextView chipFilterAll,
      @NonNull TextView chipFilterSpaceAvailable, @NonNull TextView chipFilterSystem,
      @NonNull TextView chipFilterWrongPosition, @NonNull ImageView ivBackButton,
      @NonNull ImageView ivClearAll, @NonNull LinearLayout llEmptyState,
      @NonNull LinearLayout llExportNotifications, @NonNull LinearLayout llLoadingState,
      @NonNull LinearLayout llMarkAllRead, @NonNull RecyclerView rvNotifications,
      @NonNull TextView tvNotificationCount) {
    this.rootView = rootView;
    this.btnRefreshNotifications = btnRefreshNotifications;
    this.chipFilterAll = chipFilterAll;
    this.chipFilterSpaceAvailable = chipFilterSpaceAvailable;
    this.chipFilterSystem = chipFilterSystem;
    this.chipFilterWrongPosition = chipFilterWrongPosition;
    this.ivBackButton = ivBackButton;
    this.ivClearAll = ivClearAll;
    this.llEmptyState = llEmptyState;
    this.llExportNotifications = llExportNotifications;
    this.llLoadingState = llLoadingState;
    this.llMarkAllRead = llMarkAllRead;
    this.rvNotifications = rvNotifications;
    this.tvNotificationCount = tvNotificationCount;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNotificationHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNotificationHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_notification_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNotificationHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_refresh_notifications;
      Button btnRefreshNotifications = ViewBindings.findChildViewById(rootView, id);
      if (btnRefreshNotifications == null) {
        break missingId;
      }

      id = R.id.chip_filter_all;
      TextView chipFilterAll = ViewBindings.findChildViewById(rootView, id);
      if (chipFilterAll == null) {
        break missingId;
      }

      id = R.id.chip_filter_space_available;
      TextView chipFilterSpaceAvailable = ViewBindings.findChildViewById(rootView, id);
      if (chipFilterSpaceAvailable == null) {
        break missingId;
      }

      id = R.id.chip_filter_system;
      TextView chipFilterSystem = ViewBindings.findChildViewById(rootView, id);
      if (chipFilterSystem == null) {
        break missingId;
      }

      id = R.id.chip_filter_wrong_position;
      TextView chipFilterWrongPosition = ViewBindings.findChildViewById(rootView, id);
      if (chipFilterWrongPosition == null) {
        break missingId;
      }

      id = R.id.iv_back_button;
      ImageView ivBackButton = ViewBindings.findChildViewById(rootView, id);
      if (ivBackButton == null) {
        break missingId;
      }

      id = R.id.iv_clear_all;
      ImageView ivClearAll = ViewBindings.findChildViewById(rootView, id);
      if (ivClearAll == null) {
        break missingId;
      }

      id = R.id.ll_empty_state;
      LinearLayout llEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (llEmptyState == null) {
        break missingId;
      }

      id = R.id.ll_export_notifications;
      LinearLayout llExportNotifications = ViewBindings.findChildViewById(rootView, id);
      if (llExportNotifications == null) {
        break missingId;
      }

      id = R.id.ll_loading_state;
      LinearLayout llLoadingState = ViewBindings.findChildViewById(rootView, id);
      if (llLoadingState == null) {
        break missingId;
      }

      id = R.id.ll_mark_all_read;
      LinearLayout llMarkAllRead = ViewBindings.findChildViewById(rootView, id);
      if (llMarkAllRead == null) {
        break missingId;
      }

      id = R.id.rv_notifications;
      RecyclerView rvNotifications = ViewBindings.findChildViewById(rootView, id);
      if (rvNotifications == null) {
        break missingId;
      }

      id = R.id.tv_notification_count;
      TextView tvNotificationCount = ViewBindings.findChildViewById(rootView, id);
      if (tvNotificationCount == null) {
        break missingId;
      }

      return new ActivityNotificationHistoryBinding((LinearLayout) rootView,
          btnRefreshNotifications, chipFilterAll, chipFilterSpaceAvailable, chipFilterSystem,
          chipFilterWrongPosition, ivBackButton, ivClearAll, llEmptyState, llExportNotifications,
          llLoadingState, llMarkAllRead, rvNotifications, tvNotificationCount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
