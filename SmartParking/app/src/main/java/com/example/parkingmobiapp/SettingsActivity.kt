package com.example.parkingmobiapp

import android.app.AlertDialog
import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.example.parkingmobiapp.utils.SharedPrefsHelper

/**
 * ‚úÖ Simple SettingsActivity - Fixed all errors
 */
class SettingsActivity : AppCompatActivity() {

    // UI Components
    private lateinit var ivBackButton: ImageView
    private lateinit var tvOwnerName: TextView
    private lateinit var tvCurrentPlateNumber: TextView
    private lateinit var viewRegistrationStatus: View
    private lateinit var tvRegistrationStatus: TextView
    private lateinit var switchEnableNotifications: Switch
    private lateinit var switchEnableVibration: Switch
    private lateinit var switchAutoRefresh: Switch
    private lateinit var llNotificationSound: LinearLayout
    private lateinit var tvCurrentSound: TextView
    private lateinit var llRefreshInterval: LinearLayout
    private lateinit var tvRefreshInterval: TextView
    private lateinit var llClearData: LinearLayout

    // Utility
    private lateinit var sharedPrefsHelper: SharedPrefsHelper

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        try {
            setContentView(R.layout.activity_settings)

            // Initialize helper
            sharedPrefsHelper = SharedPrefsHelper(this)

            // Initialize UI components
            initializeViews()

            // Setup click listeners
            setupClickListeners()

            // Load current settings
            loadCurrentSettings()

            Toast.makeText(this, "‚öôÔ∏è C√†i ƒë·∫∑t ƒë√£ m·ªü", Toast.LENGTH_SHORT).show()

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói kh·ªüi t·∫°o: ${e.message}", Toast.LENGTH_LONG).show()
            e.printStackTrace()
            finish()
        }
    }

    private fun initializeViews() {
        try {
            // Header
            ivBackButton = findViewById(R.id.iv_back_button)

            // Vehicle Info (Read-only from server)
            tvOwnerName = findViewById(R.id.tv_owner_name)
            tvCurrentPlateNumber = findViewById(R.id.tv_current_plate_number)
            viewRegistrationStatus = findViewById(R.id.view_registration_status)
            tvRegistrationStatus = findViewById(R.id.tv_registration_status)

            // Notification Settings
            switchEnableNotifications = findViewById(R.id.switch_enable_notifications)
            switchEnableVibration = findViewById(R.id.switch_enable_vibration)
            llNotificationSound = findViewById(R.id.ll_notification_sound)
            tvCurrentSound = findViewById(R.id.tv_current_sound)

            // App Settings
            switchAutoRefresh = findViewById(R.id.switch_auto_refresh)
            llRefreshInterval = findViewById(R.id.ll_refresh_interval)
            tvRefreshInterval = findViewById(R.id.tv_refresh_interval)

            // About Section
            llClearData = findViewById(R.id.ll_clear_data)

        } catch (e: Exception) {
            throw Exception("Error initializing views: ${e.message}")
        }
    }

    private fun setupClickListeners() {
        try {
            // Back button
            ivBackButton.setOnClickListener {
                finish()
            }

            // Vehicle info is read-only from server - no edit functionality

            // Notification settings
            switchEnableNotifications.setOnCheckedChangeListener { _, isChecked ->
                sharedPrefsHelper.setNotificationEnabled(isChecked)
                updateNotificationStatus(isChecked)
                Toast.makeText(this, if (isChecked) "‚úÖ B·∫≠t th√¥ng b√°o" else "‚ùå T·∫Øt th√¥ng b√°o", Toast.LENGTH_SHORT).show()
            }

            switchEnableVibration.setOnCheckedChangeListener { _, isChecked ->
                sharedPrefsHelper.setVibrationEnabled(isChecked)
                Toast.makeText(this, if (isChecked) "üì≥ B·∫≠t rung" else "üîá T·∫Øt rung", Toast.LENGTH_SHORT).show()
            }

            llNotificationSound.setOnClickListener {
                showSoundSelectionDialog()
            }

            // App settings
            switchAutoRefresh.setOnCheckedChangeListener { _, isChecked ->
                sharedPrefsHelper.setAutoRefreshEnabled(isChecked)
                llRefreshInterval.visibility = if (isChecked) View.VISIBLE else View.GONE
                Toast.makeText(this, if (isChecked) "üîÑ B·∫≠t t·ª± ƒë·ªông l√†m m·ªõi" else "‚è∏Ô∏è T·∫Øt t·ª± ƒë·ªông l√†m m·ªõi", Toast.LENGTH_SHORT).show()
            }

            llRefreshInterval.setOnClickListener {
                showRefreshIntervalDialog()
            }

            // About section
            llClearData.setOnClickListener {
                showClearDataDialog()
            }

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói setup controls: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun loadCurrentSettings() {
        try {
            // Load vehicle info
            loadVehicleInformation()

            // Load notification settings
            switchEnableNotifications.isChecked = sharedPrefsHelper.isNotificationEnabled()
            switchEnableVibration.isChecked = sharedPrefsHelper.isVibrationEnabled()

            // Load app settings
            switchAutoRefresh.isChecked = sharedPrefsHelper.isAutoRefreshEnabled()

            // Update UI based on settings
            updateNotificationStatus(sharedPrefsHelper.isNotificationEnabled())
            updateRefreshIntervalDisplay()

            // Show/hide refresh interval based on auto refresh setting
            llRefreshInterval.visibility = if (sharedPrefsHelper.isAutoRefreshEnabled()) View.VISIBLE else View.GONE

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói t·∫£i c√†i ƒë·∫∑t: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }

    private fun loadVehicleInformation() {
        try {
            // Try to get vehicle session first (from server cache)
            val vehicleSession = sharedPrefsHelper.getVehicleSession()

            if (vehicleSession != null) {
                // Display cached vehicle information (same format as MainActivity)
                tvOwnerName.text = vehicleSession.ownerName.uppercase()
                tvCurrentPlateNumber.text = "(${vehicleSession.plateNumber})"
                updateRegistrationStatus(true, "ƒê√£ ƒëƒÉng k√Ω v·ªõi h·ªá th·ªëng")

            } else {
                // Fallback to legacy plate number
                val plateNumber = sharedPrefsHelper.getPlateNumber()
                val userName = sharedPrefsHelper.getUserFullName()

                if (plateNumber.isNotEmpty()) {
                    tvOwnerName.text = if (userName.isNotEmpty()) userName.uppercase() else "NG∆Ø·ªúI D√ôNG"
                    tvCurrentPlateNumber.text = "($plateNumber)"
                    updateRegistrationStatus(true, "ƒê√£ l∆∞u bi·ªÉn s·ªë")
                } else {
                    tvOwnerName.text = "CH∆ØA ƒêƒÇNG K√ù"
                    tvCurrentPlateNumber.text = ""
                    updateRegistrationStatus(false, "Ch∆∞a ƒëƒÉng k√Ω bi·ªÉn s·ªë")
                }
            }

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói t·∫£i th√¥ng tin xe: ${e.message}", Toast.LENGTH_SHORT).show()
            tvOwnerName.text = "L·ªñI T·∫¢I D·ªÆ LI·ªÜU"
            tvCurrentPlateNumber.text = ""
            updateRegistrationStatus(false, "L·ªói t·∫£i th√¥ng tin")
        }
    }

    private fun updateRegistrationStatus(isRegistered: Boolean, statusText: String) {
        try {
            val colorResource = if (isRegistered) R.color.success_color else R.color.error_color
            val color = ContextCompat.getColor(this, colorResource)

            viewRegistrationStatus.backgroundTintList = ContextCompat.getColorStateList(this, colorResource)
            tvRegistrationStatus.text = statusText
            tvRegistrationStatus.setTextColor(color)

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }

    private fun updateNotificationStatus(enabled: Boolean) {
        try {
            // Enable/disable dependent notification settings
            switchEnableVibration.isEnabled = enabled
            llNotificationSound.isEnabled = enabled

            // Update UI appearance
            val alpha = if (enabled) 1.0f else 0.5f
            switchEnableVibration.alpha = alpha
            llNotificationSound.alpha = alpha

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o", Toast.LENGTH_SHORT).show()
        }
    }

    private fun updateRefreshIntervalDisplay() {
        try {
            val intervalSeconds = sharedPrefsHelper.getRefreshInterval()
            val displayText = when {
                intervalSeconds < 60 -> "$intervalSeconds gi√¢y"
                intervalSeconds < 3600 -> "${intervalSeconds / 60} ph√∫t"
                else -> "${intervalSeconds / 3600} gi·ªù"
            }
            tvRefreshInterval.text = displayText

        } catch (e: Exception) {
            tvRefreshInterval.text = "30 gi√¢y"
        }
    }

    // ========== DIALOG METHODS ==========

    // Removed showChangePlateDialog() - Vehicle info is read-only from server

    private fun showSoundSelectionDialog() {
        try {
            val soundOptions = arrayOf(
                "üîî M·∫∑c ƒë·ªãnh",
                "üì¢ Chu√¥ng 1",
                "üìØ Chu√¥ng 2",
                "üéµ Nh·∫°c 1",
                "üé∂ Nh·∫°c 2",
                "üîá Kh√¥ng √¢m thanh"
            )

            var selectedIndex = 0 // Default selection

            AlertDialog.Builder(this)
                .setTitle("üîä Ch·ªçn √¢m thanh th√¥ng b√°o")
                .setSingleChoiceItems(soundOptions, selectedIndex) { _, which ->
                    selectedIndex = which
                }
                .setPositiveButton("üíæ L∆∞u") { _, _ ->
                    val selectedSound = soundOptions[selectedIndex]
                    tvCurrentSound.text = selectedSound
                    sharedPrefsHelper.setSelectedSoundUri(selectedSound)
                    Toast.makeText(this, "‚úÖ ƒê√£ l∆∞u √¢m thanh: $selectedSound", Toast.LENGTH_SHORT).show()
                }
                .setNegativeButton("‚ùå H·ªßy", null)
                .show()

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói ch·ªçn √¢m thanh", Toast.LENGTH_SHORT).show()
        }
    }

    private fun showRefreshIntervalDialog() {
        try {
            val intervalOptions = arrayOf(
                "15 gi√¢y",
                "30 gi√¢y",
                "1 ph√∫t",
                "2 ph√∫t",
                "5 ph√∫t"
            )

            val intervalValues = arrayOf(15, 30, 60, 120, 300)
            val currentInterval = sharedPrefsHelper.getRefreshInterval()

            // Find current selection
            var selectedIndex = intervalValues.indexOf(currentInterval)
            if (selectedIndex == -1) selectedIndex = 1 // Default to 30 seconds

            AlertDialog.Builder(this)
                .setTitle("‚è±Ô∏è T·∫ßn su·∫•t c·∫≠p nh·∫≠t")
                .setSingleChoiceItems(intervalOptions, selectedIndex) { _, which ->
                    selectedIndex = which
                }
                .setPositiveButton("üíæ L∆∞u") { _, _ ->
                    val newInterval = intervalValues[selectedIndex]
                    sharedPrefsHelper.setRefreshInterval(newInterval)
                    updateRefreshIntervalDisplay()
                    Toast.makeText(this, "‚úÖ ƒê√£ l∆∞u t·∫ßn su·∫•t: ${intervalOptions[selectedIndex]}", Toast.LENGTH_SHORT).show()
                }
                .setNegativeButton("‚ùå H·ªßy", null)
                .show()

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói ch·ªçn t·∫ßn su·∫•t c·∫≠p nh·∫≠t", Toast.LENGTH_SHORT).show()
        }
    }

    private fun showClearDataDialog() {
        try {
            AlertDialog.Builder(this)
                .setTitle("üóëÔ∏è X√≥a d·ªØ li·ªáu ·ª©ng d·ª•ng")
                .setMessage("‚ö†Ô∏è H√†nh ƒë·ªông n√†y s·∫Ω x√≥a:\n\n‚Ä¢ Cache d·ªØ li·ªáu ƒë·ªó xe\n‚Ä¢ L·ªãch s·ª≠ th√¥ng b√°o\n‚Ä¢ C√†i ƒë·∫∑t t√πy ch·ªânh\n\nTh√¥ng tin t√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c gi·ªØ l·∫°i.")
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setPositiveButton("üóëÔ∏è X√≥a") { _, _ ->
                    clearAppData()
                }
                .setNegativeButton("‚ùå H·ªßy", null)
                .show()

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói hi·ªÉn th·ªã dialog x√≥a d·ªØ li·ªáu", Toast.LENGTH_SHORT).show()
        }
    }

    // ========== HELPER METHODS ==========

    // Removed validatePlateNumber() and savePlateNumber() - Vehicle info is read-only

    private fun clearAppData() {
        try {
            // Clear cache but keep user login
            sharedPrefsHelper.clearCache()

            Toast.makeText(this, "‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu ·ª©ng d·ª•ng", Toast.LENGTH_SHORT).show()

            // Optionally restart the activity to reflect changes
            recreate()

        } catch (e: Exception) {
            Toast.makeText(this, "‚ùå L·ªói x√≥a d·ªØ li·ªáu: ${e.message}", Toast.LENGTH_SHORT).show()
        }
    }

    // ========== LIFECYCLE METHODS ==========

    override fun onBackPressed() {
        super.onBackPressed()
        finish()
    }

    override fun onResume() {
        super.onResume()
        // Refresh vehicle information in case it was updated
        loadVehicleInformation()
    }
}