package com.example.parkingmobiapp

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.parkingmobiapp.service.VehicleAuthenticationService
import com.example.parkingmobiapp.utils.SharedPrefsHelper
import com.example.parkingmobiapp.utils.ValidationUtils

/**
 * LoginActivity - ƒêƒÉng nh·∫≠p cho ch·ªß xe ƒë√£ ƒëƒÉng k√Ω
 * Ch·ª©c nƒÉng:
 * - ƒêƒÉng nh·∫≠p b·∫±ng bi·ªÉn s·ªë xe + s·ªë ƒëi·ªán tho·∫°i
 * - X√°c th·ª±c v·ªõi database server
 * - L∆∞u session th√¥ng tin xe
 */
class LoginActivity : AppCompatActivity() {

    private lateinit var etPlateNumber: EditText
    private lateinit var etOwnerPhone: EditText
    private lateinit var btnLogin: Button
    private lateinit var tvServerConfig: TextView
    private lateinit var tvForgotPassword: TextView

    private lateinit var sharedPrefsHelper: SharedPrefsHelper
    private lateinit var vehicleAuthService: VehicleAuthenticationService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_vehicle_login)

        initializeComponents()
        setupClickListeners()

        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ session xe h·ª£p l·ªá
        if (sharedPrefsHelper.hasActiveVehicleSession()) {
            navigateToMain()
        }
    }

    private fun initializeComponents() {
        etPlateNumber = findViewById(R.id.et_plate_number)
        etOwnerPhone = findViewById(R.id.et_owner_phone)
        btnLogin = findViewById(R.id.btn_login)
        tvServerConfig = findViewById(R.id.tv_server_config)
        tvForgotPassword = findViewById(R.id.tv_forgot_password)

        sharedPrefsHelper = SharedPrefsHelper(this)
        vehicleAuthService = VehicleAuthenticationService(sharedPrefsHelper)
    }

    private fun setupClickListeners() {
        btnLogin.setOnClickListener {
            handleVehicleLogin()
        }

        tvServerConfig.setOnClickListener {
            showServerConfigDialog()
        }

        tvForgotPassword.setOnClickListener {
            showForgotPasswordDialog()
        }
    }

    private fun handleVehicleLogin() {
        val plateNumber = etPlateNumber.text.toString().trim()
        val ownerPhone = etOwnerPhone.text.toString().trim()

        // Validate input
        if (!validateInput(plateNumber, ownerPhone)) {
            return
        }

        // Hi·ªÉn th·ªã loading
        setLoginLoading(true)

        // ƒêƒÉng nh·∫≠p v·ªõi vehicle service
        vehicleAuthService.loginWithVehicle(plateNumber, ownerPhone,
            object : VehicleAuthenticationService.VehicleLoginCallback {
                override fun onLoginSuccess(vehicleInfo: VehicleAuthenticationService.VehicleInfo) {
                    runOnUiThread {
                        setLoginLoading(false)

                        // C≈©ng l∆∞u plate number v√†o SharedPrefs cho compatibility
                        sharedPrefsHelper.savePlateNumber(vehicleInfo.plate_number)

                        showToast("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!\nCh√†o m·ª´ng ${vehicleInfo.owner_name}")

                        navigateToMain()
                    }
                }

                override fun onLoginError(error: String) {
                    runOnUiThread {
                        setLoginLoading(false)

                        val errorMsg = when {
                            error.contains("kh√¥ng ch√≠nh x√°c") ->
                                "‚ùå Bi·ªÉn s·ªë ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng"
                            error.contains("kh√¥ng t√¨m th·∫•y") ->
                                "‚ùå Xe ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng"
                            error.contains("v√¥ hi·ªáu h√≥a") ->
                                "‚ùå Xe ƒë√£ b·ªã v√¥ hi·ªáu h√≥a. Li√™n h·ªá qu·∫£n l√Ω"
                            error.contains("k·∫øt n·ªëi") ->
                                "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server. Ki·ªÉm tra c√†i ƒë·∫∑t"
                            else -> "‚ùå $error"
                        }

                        showToast(errorMsg)

                        // N·∫øu l·ªói server, hi·ªán dialog c·∫•u h√¨nh
                        if (error.contains("server") || error.contains("k·∫øt n·ªëi")) {
                            showServerConfigDialog()
                        }
                    }
                }
            })
    }

    private fun validateInput(plateNumber: String, ownerPhone: String): Boolean {
        var isValid = true

        // Validate plate number
        if (plateNumber.isEmpty()) {
            etPlateNumber.error = "Vui l√≤ng nh·∫≠p bi·ªÉn s·ªë xe"
            isValid = false
        } else if (!ValidationUtils.isValidPlateNumber(plateNumber)) {
            etPlateNumber.error = "Bi·ªÉn s·ªë xe kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng"
            isValid = false
        }

        // Validate phone number
        if (ownerPhone.isEmpty()) {
            etOwnerPhone.error = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            isValid = false
        } else if (!ValidationUtils.isValidPhone(ownerPhone)) {
            etOwnerPhone.error = "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
            isValid = false
        }

        return isValid
    }

    private fun setLoginLoading(loading: Boolean) {
        btnLogin.isEnabled = !loading
        btnLogin.text = if (loading) "ƒêang x√°c th·ª±c..." else "ƒêƒÉng nh·∫≠p"
        etPlateNumber.isEnabled = !loading
        etOwnerPhone.isEnabled = !loading
    }

    private fun showServerConfigDialog() {
        val dialogBuilder = androidx.appcompat.app.AlertDialog.Builder(this)
        val dialogView = layoutInflater.inflate(R.layout.dialog_server_config, null)

        val etServerUrl = dialogView.findViewById<EditText>(R.id.et_server_url)
        etServerUrl.setText(sharedPrefsHelper.getServerUrl())

        dialogBuilder
            .setView(dialogView)
            .setTitle("üîß C·∫•u h√¨nh Server")
            .setMessage("Nh·∫≠p ƒë·ªãa ch·ªâ server parking system:\n\n" +
                    "üí° Li√™n h·ªá qu·∫£n l√Ω ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ server ch√≠nh x√°c")
            .setPositiveButton("L∆∞u") { _, _ ->
                val serverUrl = etServerUrl.text.toString().trim()
                if (serverUrl.isNotEmpty() && sharedPrefsHelper.validateServerUrl(serverUrl)) {
                    sharedPrefsHelper.saveServerUrl(serverUrl)
                    showToast("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh server")
                } else {
                    showToast("‚ùå URL server kh√¥ng h·ª£p l·ªá")
                }
            }
            .setNegativeButton("H·ªßy", null)
            .setNeutralButton("M·∫∑c ƒë·ªãnh") { _, _ ->
                etServerUrl.setText("http://192.168.1.6:5000")
            }
            .show()
    }

    private fun showForgotPasswordDialog() {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("üîë Qu√™n th√¥ng tin ƒëƒÉng nh·∫≠p?")
            .setMessage("ƒê·ªÉ l·∫•y l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p:\n\n" +
                    "1Ô∏è‚É£ Li√™n h·ªá qu·∫£n l√Ω b√£i xe\n" +
                    "2Ô∏è‚É£ Cung c·∫•p th√¥ng tin xe v√† gi·∫•y t·ªù\n" +
                    "3Ô∏è‚É£ Qu·∫£n l√Ω s·∫Ω x√°c nh·∫≠n v√† cung c·∫•p th√¥ng tin\n\n" +
                    "üìû Hotline: 1900-xxxx\n" +
                    "üìß Email: support@parking.com")
            .setPositiveButton("ƒê√£ hi·ªÉu", null)
            .show()
    }

    private fun navigateToMain() {
        val intent = Intent(this, MainActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        startActivity(intent)
        finish()
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }

    override fun onResume() {
        super.onResume()

        // Hi·ªÉn th·ªã tr·∫°ng th√°i server
        if (!sharedPrefsHelper.isServerConfigured()) {
            tvServerConfig.text = "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh server"
            tvServerConfig.setTextColor(getColor(android.R.color.holo_red_dark))
        } else {
            tvServerConfig.text = "‚úÖ Server: ${sharedPrefsHelper.getServerUrl()}"
            tvServerConfig.setTextColor(getColor(android.R.color.holo_green_dark))
        }
    }
}