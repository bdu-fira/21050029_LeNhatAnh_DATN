package com.example.parkingmobiapp.services

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.graphics.BitmapFactory
import android.media.RingtoneManager
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import com.example.parkingmobiapp.MainActivity
import com.example.parkingmobiapp.R
import com.example.parkingmobiapp.models.NotificationItem
import com.example.parkingmobiapp.utils.SharedPrefsHelper
import android.util.Log
import android.app.NotificationChannelGroup
import androidx.core.app.NotificationManagerCompat

class PushNotificationService {

    companion object {
        private const val TAG = "PushNotificationService"

        // Notification Channels
        private const val CHANNEL_PARKING_STATUS = "parking_status"
        private const val CHANNEL_SPACE_ALERTS = "space_alerts"
        private const val CHANNEL_SYSTEM_UPDATES = "system_updates"
        private const val CHANNEL_URGENT_ALERTS = "urgent_alerts"
        private const val CHANNEL_VEHICLE_ENTRY = "vehicle_entry"
        private const val CHANNEL_VEHICLE_EXIT = "vehicle_exit"

        // Channel Groups
        private const val GROUP_PARKING = "parking_group"
        private const val GROUP_SYSTEM = "system_group"

        // Notification IDs
        private const val NOTIFICATION_PARKING_FULL = 1001
        private const val NOTIFICATION_SPACE_AVAILABLE = 1002
        private const val NOTIFICATION_PARKING_STATUS = 1003
        private const val NOTIFICATION_SYSTEM_UPDATE = 1004
        private const val NOTIFICATION_URGENT_ALERT = 1005
    }





    fun showVehicleNotification(
        context: Context,
        title: String,
        message: String,
        plateNumber: String,
        action: String,
        imageUrl: String? = null
    ) {
        try {
            val channelId = if (action == "entry")
                CHANNEL_VEHICLE_ENTRY else CHANNEL_VEHICLE_EXIT

            val intent = Intent(context, MainActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                putExtra("notification_type", "vehicle")
                putExtra("plate_number", plateNumber)
                putExtra("action", action)
            }

            val pendingIntent = PendingIntent.getActivity(
                context,
                System.currentTimeMillis().toInt(),
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            val notification = NotificationCompat.Builder(context, channelId)
                .setSmallIcon(R.drawable.ic_notification) // ƒê·ªïi icon ph√π h·ª£p
                .setContentTitle(title)
                .setContentText(message)
                .setStyle(NotificationCompat.BigTextStyle().bigText(message))
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setAutoCancel(true)
                .setContentIntent(pendingIntent)
                .setCategory(NotificationCompat.CATEGORY_MESSAGE)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .build()

            NotificationManagerCompat.from(context).notify(System.currentTimeMillis().toInt(), notification)

            Log.d(TAG, "‚úÖ Vehicle notification sent: $title")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing vehicle notification", e)
        }
    }




    // Th√™m method t·∫°o vehicle channels
    private fun createVehicleChannels(notificationManager: NotificationManager, context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // Channel cho xe v√†o
            val entryChannel = NotificationChannel(
                CHANNEL_VEHICLE_ENTRY,
                "üöó Xe v√†o b√£i",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Th√¥ng b√°o khi xe v√†o b√£i ƒë·ªó"
                group = GROUP_PARKING
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.success_color)
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 250, 250, 250)
                setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION), null)
            }
            notificationManager.createNotificationChannel(entryChannel)

            // Channel cho xe ra
            val exitChannel = NotificationChannel(
                CHANNEL_VEHICLE_EXIT,
                "üöó Xe ra kh·ªèi b√£i",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Th√¥ng b√°o khi xe ra kh·ªèi b√£i ƒë·ªó"
                group = GROUP_PARKING
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.info_color)
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 250, 250, 250)
                setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION), null)
            }
            notificationManager.createNotificationChannel(exitChannel)
        }
    }
    /**
     * ‚úÖ Initialize notification channels with enhanced categories
     */
    fun initializeNotificationChannels(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

            try {
                // Create notification channel groups
                createNotificationGroups(notificationManager)

                // Create individual channels
                createParkingStatusChannel(notificationManager, context)
                createSpaceAlertChannel(notificationManager, context)
                createSystemUpdateChannel(notificationManager, context)
                createUrgentAlertChannel(notificationManager, context)
                createVehicleChannels(notificationManager, context) // ‚úÖ TH√äM

                Log.d(TAG, "‚úÖ All notification channels initialized successfully")

            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error initializing notification channels", e)
            }
        }
    }

    private fun createNotificationGroups(notificationManager: NotificationManager) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // Parking related notifications
            val parkingGroup = NotificationChannelGroup(
                GROUP_PARKING,
                "üÖøÔ∏è Th√¥ng b√°o b√£i ƒë·ªó xe"
            )

            // System related notifications
            val systemGroup = NotificationChannelGroup(
                GROUP_SYSTEM,
                "‚öôÔ∏è Th√¥ng b√°o h·ªá th·ªëng"
            )

            notificationManager.createNotificationChannelGroups(listOf(parkingGroup, systemGroup))
        }
    }

    private fun createParkingStatusChannel(notificationManager: NotificationManager, context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_PARKING_STATUS,
                "üìä Tr·∫°ng th√°i b√£i ƒë·ªó",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "Th√¥ng b√°o v·ªÅ t√¨nh tr·∫°ng ch·ªó ƒë·ªó xe hi·ªán t·∫°i"
                group = GROUP_PARKING
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.info_color)
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 250, 250, 250)
                setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION), null)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createSpaceAlertChannel(notificationManager: NotificationManager, context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_SPACE_ALERTS,
                "üö® C·∫£nh b√°o ch·ªó ƒë·ªó",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "C·∫£nh b√°o khi b√£i ƒë·ªó ƒë·∫ßy ho·∫∑c c√≥ ch·ªó tr·ªëng"
                group = GROUP_PARKING
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.warning_color)
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 300, 200, 300, 200, 300)
                setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION), null)
                setShowBadge(true)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createSystemUpdateChannel(notificationManager: NotificationManager, context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_SYSTEM_UPDATES,
                "üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "Th√¥ng b√°o v·ªÅ c·∫≠p nh·∫≠t v√† b·∫£o tr√¨ h·ªá th·ªëng"
                group = GROUP_SYSTEM
                enableLights(false)
                enableVibration(false)
                setShowBadge(false)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    private fun createUrgentAlertChannel(notificationManager: NotificationManager, context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_URGENT_ALERTS,
                "üö® C·∫£nh b√°o kh·∫©n c·∫•p",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "C·∫£nh b√°o kh·∫©n c·∫•p v·ªÅ b√£i ƒë·ªó xe"
                group = GROUP_PARKING
                enableLights(true)
                lightColor = ContextCompat.getColor(context, R.color.error_color)
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 500, 300, 500, 300, 500)
                setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM), null)
                setShowBadge(true)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }

    /**
     * ‚úÖ Show enhanced parking full notification
     */
    fun showParkingFullNotification(context: Context, totalSpaces: Int = 0, lastAvailableTime: String = "") {
        val sharedPrefs = SharedPrefsHelper(context)
        if (!sharedPrefs.isNotificationEnabled()) {
            Log.d(TAG, "Notifications disabled by user")
            return
        }

        try {
            val title = "üö´ B√£i ƒë·ªó xe ƒë√£ ƒë·∫ßy!"
            val message = if (totalSpaces > 0) {
                "T·∫•t c·∫£ $totalSpaces ch·ªó ƒë·ªó ƒë√£ c√≥ xe. Vui l√≤ng ch·ªù ho·∫∑c t√¨m b√£i kh√°c."
            } else {
                "Hi·ªán t·∫°i kh√¥ng c√≤n ch·ªó ƒë·ªó tr·ªëng. Vui l√≤ng ch·ªù ho·∫∑c t√¨m b√£i kh√°c."
            }

            val expandedMessage = buildString {
                appendLine("üìç T√¨nh tr·∫°ng: ƒê·∫ßy 100%")
                if (totalSpaces > 0) {
                    appendLine("üÖøÔ∏è T·ªïng ch·ªó ƒë·ªó: $totalSpaces")
                }
                if (lastAvailableTime.isNotEmpty()) {
                    appendLine("‚è∞ L·∫ßn cu·ªëi c√≥ ch·ªó: $lastAvailableTime")
                }
                appendLine("üí° G·ª£i √Ω: Th·ª≠ l·∫°i sau 15-30 ph√∫t")
                appendLine("üì± B·∫≠t th√¥ng b√°o ƒë·ªÉ nh·∫≠n tin khi c√≥ ch·ªó tr·ªëng")
            }

            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_SPACE_ALERTS,
                title = title,
                message = message,
                expandedMessage = expandedMessage,
                notificationId = NOTIFICATION_PARKING_FULL,
                iconRes = R.drawable.ic_parking_full,
                color = ContextCompat.getColor(context, R.color.error_color),
                priority = NotificationCompat.PRIORITY_HIGH,
                autoCancel = true,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(NOTIFICATION_PARKING_FULL, notification)

            Log.i(TAG, "‚úÖ Parking full notification sent")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing parking full notification", e)
        }
    }

    /**
     * ‚úÖ Show enhanced space available notification
     */
    fun showSpaceAvailableNotification(
        context: Context,
        availableSpaces: Int,
        totalSpaces: Int = 0,
        estimatedWaitTime: String = ""
    ) {
        val sharedPrefs = SharedPrefsHelper(context)
        if (!sharedPrefs.isNotificationEnabled()) return

        try {
            val title = "‚úÖ C√≥ ch·ªó ƒë·ªó tr·ªëng!"
            val message = "Hi·ªán c√≥ $availableSpaces ch·ªó ƒë·ªó tr·ªëng. Nhanh tay ƒë·∫øn b√£i xe!"

            val expandedMessage = buildString {
                appendLine("üÖøÔ∏è Ch·ªó tr·ªëng: $availableSpaces/${totalSpaces}")
                appendLine("üìä T·ª∑ l·ªá: ${((totalSpaces - availableSpaces) * 100 / totalSpaces)}% ƒë√£ s·ª≠ d·ª•ng")
                if (estimatedWaitTime.isNotEmpty()) {
                    appendLine("‚è±Ô∏è Th·ªùi gian ch·ªù ∆∞·ªõc t√≠nh: $estimatedWaitTime")
                }
                appendLine("üöó H√£y ƒë·∫øn ngay ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó ƒë·ªó")
                appendLine("üìç M·ªü app ƒë·ªÉ xem v·ªã tr√≠ ch·ªó tr·ªëng")
            }

            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_SPACE_ALERTS,
                title = title,
                message = message,
                expandedMessage = expandedMessage,
                notificationId = NOTIFICATION_SPACE_AVAILABLE,
                iconRes = R.drawable.ic_parking_available,
                color = ContextCompat.getColor(context, R.color.success_color),
                priority = NotificationCompat.PRIORITY_HIGH,
                autoCancel = true,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(NOTIFICATION_SPACE_AVAILABLE, notification)

            Log.i(TAG, "‚úÖ Space available notification sent: $availableSpaces spaces")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing space available notification", e)
        }
    }

    /**
     * ‚úÖ Show parking status update notification
     */
    fun showParkingStatusNotification(
        context: Context,
        available: Int,
        total: Int,
        percentage: Int,
        trend: String = ""
    ) {
        val sharedPrefs = SharedPrefsHelper(context)
        if (!sharedPrefs.isNotificationEnabled()) return

        try {
            val statusEmoji = when {
                available == 0 -> "üö´"
                available <= 3 -> "‚ö†Ô∏è"
                available <= total * 0.2 -> "üü°"
                else -> "‚úÖ"
            }

            val title = "$statusEmoji C·∫≠p nh·∫≠t b√£i ƒë·ªó xe"
            val message = "$available/$total ch·ªó ƒë·ªó tr·ªëng ($percentage% ƒë√£ s·ª≠ d·ª•ng)"

            val expandedMessage = buildString {
                appendLine("üìä Th·ªëng k√™ hi·ªán t·∫°i:")
                appendLine("‚Ä¢ Ch·ªó tr·ªëng: $available")
                appendLine("‚Ä¢ ƒê√£ s·ª≠ d·ª•ng: ${total - available}")
                appendLine("‚Ä¢ T·ªïng s·ªë: $total")
                appendLine("‚Ä¢ T·ª∑ l·ªá s·ª≠ d·ª•ng: $percentage%")
                if (trend.isNotEmpty()) {
                    appendLine("üìà Xu h∆∞·ªõng: $trend")
                }
                appendLine("üîÑ C·∫≠p nh·∫≠t l√∫c: ${java.text.SimpleDateFormat("HH:mm", java.util.Locale.getDefault()).format(java.util.Date())}")
            }

            val color = when {
                available == 0 -> R.color.error_color
                available <= 3 -> R.color.warning_color
                else -> R.color.info_color
            }

            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_PARKING_STATUS,
                title = title,
                message = message,
                expandedMessage = expandedMessage,
                notificationId = NOTIFICATION_PARKING_STATUS,
                iconRes = R.drawable.ic_parking_status,
                color = ContextCompat.getColor(context, color),
                priority = NotificationCompat.PRIORITY_DEFAULT,
                autoCancel = true,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(NOTIFICATION_PARKING_STATUS, notification)

            Log.d(TAG, "‚úÖ Parking status notification sent")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing parking status notification", e)
        }
    }

    /**
     * ‚úÖ Show system maintenance notification
     */
    fun showSystemMaintenanceNotification(
        context: Context,
        maintenanceType: String,
        estimatedDuration: String = "",
        affectedFeatures: List<String> = emptyList()
    ) {
        try {
            val title = "üîß B·∫£o tr√¨ h·ªá th·ªëng"
            val message = "H·ªá th·ªëng ƒëang ƒë∆∞·ª£c b·∫£o tr√¨: $maintenanceType"

            val expandedMessage = buildString {
                appendLine("üõ†Ô∏è Lo·∫°i b·∫£o tr√¨: $maintenanceType")
                if (estimatedDuration.isNotEmpty()) {
                    appendLine("‚è∞ Th·ªùi gian d·ª± ki·∫øn: $estimatedDuration")
                }
                if (affectedFeatures.isNotEmpty()) {
                    appendLine("üìã T√≠nh nƒÉng ·∫£nh h∆∞·ªüng:")
                    affectedFeatures.forEach { feature ->
                        appendLine("‚Ä¢ $feature")
                    }
                }
                appendLine("üôè Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y")
                appendLine("üì± App v·∫´n hi·ªÉn th·ªã d·ªØ li·ªáu cache")
            }

            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_SYSTEM_UPDATES,
                title = title,
                message = message,
                expandedMessage = expandedMessage,
                notificationId = NOTIFICATION_SYSTEM_UPDATE,
                iconRes = R.drawable.ic_system_update,
                color = ContextCompat.getColor(context, R.color.warning_color),
                priority = NotificationCompat.PRIORITY_LOW,
                autoCancel = true,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(NOTIFICATION_SYSTEM_UPDATE, notification)

            Log.d(TAG, "‚úÖ System maintenance notification sent")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing system maintenance notification", e)
        }
    }

    /**
     * ‚úÖ Show urgent alert notification
     */
    fun showUrgentAlertNotification(
        context: Context,
        alertType: String,
        alertMessage: String,
        actionRequired: String = ""
    ) {
        try {
            val title = "üö® C·∫£nh b√°o kh·∫©n c·∫•p"
            val message = "$alertType: $alertMessage"

            val expandedMessage = buildString {
                appendLine("‚ö†Ô∏è Lo·∫°i c·∫£nh b√°o: $alertType")
                appendLine("üì¢ N·ªôi dung: $alertMessage")
                if (actionRequired.isNotEmpty()) {
                    appendLine("üéØ H√†nh ƒë·ªông c·∫ßn thi·∫øt: $actionRequired")
                }
                appendLine("üìû Li√™n h·ªá b·∫£o v·ªá n·∫øu c·∫ßn thi·∫øt")
                appendLine("üïí Th·ªùi gian: ${java.text.SimpleDateFormat("HH:mm:ss", java.util.Locale.getDefault()).format(java.util.Date())}")
            }

            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_URGENT_ALERTS,
                title = title,
                message = message,
                expandedMessage = expandedMessage,
                notificationId = NOTIFICATION_URGENT_ALERT,
                iconRes = R.drawable.ic_urgent_alert,
                color = ContextCompat.getColor(context, R.color.error_color),
                priority = NotificationCompat.PRIORITY_MAX,
                autoCancel = false,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(NOTIFICATION_URGENT_ALERT, notification)

            Log.w(TAG, "üö® Urgent alert notification sent: $alertType")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing urgent alert notification", e)
        }
    }

    /**
     * ‚úÖ Create enhanced notification with rich content
     */
    private fun createEnhancedNotification(
        context: Context,
        channelId: String,
        title: String,
        message: String,
        expandedMessage: String,
        notificationId: Int,
        iconRes: Int,
        color: Int,
        priority: Int,
        autoCancel: Boolean,
        showProgress: Boolean,
        progressMax: Int = 100,
        progressCurrent: Int = 0
    ): Notification {

        // Create intent for when notification is tapped
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("notification_id", notificationId)
            putExtra("notification_type", channelId)
        }

        val pendingIntent = PendingIntent.getActivity(
            context,
            notificationId,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // Build the notification
        val builder = NotificationCompat.Builder(context, channelId)
            .setSmallIcon(iconRes)
            .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.ic_parking_logo))
            .setContentTitle(title)
            .setContentText(message)
            .setStyle(NotificationCompat.BigTextStyle().bigText(expandedMessage))
            .setContentIntent(pendingIntent)
            .setAutoCancel(autoCancel)
            .setPriority(priority)
            .setColor(color)
            .setCategory(NotificationCompat.CATEGORY_STATUS)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setShowWhen(true)
            .setWhen(System.currentTimeMillis())

        // Add progress bar if needed
        if (showProgress) {
            builder.setProgress(progressMax, progressCurrent, false)
        }

        // Add action buttons based on notification type
        when (channelId) {
            CHANNEL_SPACE_ALERTS -> {
                val openAppIntent = Intent(context, MainActivity::class.java)
                val openAppPendingIntent = PendingIntent.getActivity(
                    context,
                    notificationId + 1000,
                    openAppIntent,
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
                builder.addAction(R.drawable.ic_parking_logo, "M·ªü App", openAppPendingIntent)
            }
        }

        return builder.build()
    }

    /**
     * ‚úÖ Generic notification method for backward compatibility
     */
    fun showNotification(context: Context, title: String, message: String) {
        try {
            val notification = createEnhancedNotification(
                context = context,
                channelId = CHANNEL_PARKING_STATUS,
                title = title,
                message = message,
                expandedMessage = message,
                notificationId = System.currentTimeMillis().toInt(),
                iconRes = R.drawable.ic_notification,
                color = ContextCompat.getColor(context, R.color.info_color),
                priority = NotificationCompat.PRIORITY_DEFAULT,
                autoCancel = true,
                showProgress = false
            )

            NotificationManagerCompat.from(context).notify(System.currentTimeMillis().toInt(), notification)

            Log.d(TAG, "‚úÖ Generic notification sent: $title")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing generic notification", e)
        }
    }

    /**
     * ‚úÖ Cancel specific notification
     */
    fun cancelNotification(context: Context, notificationId: Int) {
        NotificationManagerCompat.from(context).cancel(notificationId)
        Log.d(TAG, "üóëÔ∏è Notification cancelled: $notificationId")
    }

    /**
     * ‚úÖ Cancel all notifications
     */
    fun cancelAllNotifications(context: Context) {
        NotificationManagerCompat.from(context).cancelAll()
        Log.d(TAG, "üóëÔ∏è All notifications cancelled")
    }

    /**
     * ‚úÖ Check if notifications are enabled
     */
    fun areNotificationsEnabled(context: Context): Boolean {
        return NotificationManagerCompat.from(context).areNotificationsEnabled()
    }
    fun createNotificationChannels(context: Context) {
        initializeNotificationChannels(context)
    }
}
