package com.example.parkingmobiapp

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.widget.Button
import android.widget.EditText
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import android.widget.ProgressBar
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.parkingmobiapp.models.NotificationItem
import com.example.parkingmobiapp.models.ParkingStatus
import com.example.parkingmobiapp.service.ParkingStatusService
import com.example.parkingmobiapp.services.PushNotificationService
import com.example.parkingmobiapp.services.WebSocketManager
import com.example.parkingmobiapp.utils.SharedPrefsHelper
import java.text.SimpleDateFormat
import java.util.*
import android.app.AlertDialog
import android.util.Log
import android.os.Handler
import android.os.Looper
import android.animation.ObjectAnimator
import android.content.Context
import android.widget.*
import com.example.parkingmobiapp.models.VehicleNotification
import org.json.JSONArray
import org.json.JSONObject
import kotlin.apply
import kotlin.text.clear

/**
 * ‚úÖ FIXED MainActivity with Enhanced WebSocket Integration
 */
class MainActivity : AppCompatActivity() {

    private val recentNotifications = mutableListOf<NotificationItem>()
    private lateinit var notificationsContainer: LinearLayout
    private lateinit var noNotificationsView: LinearLayout

    companion object {
        private const val TAG = "MainActivity"
        private const val PERMISSION_REQUEST_CODE = 1001
        private const val MAX_VISIBLE_NOTIFICATIONS = 3
        private const val WEBSOCKET_RECONNECT_DELAY = 5000L
    }

    // ========== UI COMPONENTS ==========
    private lateinit var tvUserPlate: TextView
    private lateinit var tvCurrentStatus: TextView
    private lateinit var tvAvailableSpaces: TextView
    private lateinit var tvLastUpdate: TextView
    private lateinit var ivStatusIcon: ImageView
    private lateinit var llNotificationsContainer: LinearLayout
    private lateinit var llNoNotifications: LinearLayout
    private lateinit var viewConnectionIndicator: View
    private lateinit var tvConnectionStatus: TextView

    // Parking Status UI Components
    private lateinit var tvParkingTotal: TextView
    private lateinit var tvParkingAvailable: TextView
    private lateinit var tvParkingOccupied: TextView
    private lateinit var tvParkingPercentage: TextView
    private lateinit var tvParkingStatusMessage: TextView
    private lateinit var viewParkingIndicator: View
    private lateinit var btnRefreshParking: Button
    private lateinit var llParkingInfo: LinearLayout
    private lateinit var progressParkingOccupancy: ProgressBar

    // Optional WebSocket UI (safe initialization)
    private var tvWebSocketStatus: TextView? = null
    private var btnTestWebSocket: Button? = null
    private var btnReconnectWebSocket: Button? = null

    // ========== SERVICES & UTILITIES ==========
    private lateinit var sharedPrefsHelper: SharedPrefsHelper
    private lateinit var notificationService: PushNotificationService
    private lateinit var parkingStatusService: ParkingStatusService
    private lateinit var webSocketManager: WebSocketManager

    // ========== STATE VARIABLES ==========
    private var isParkingServiceActive = false
    private var currentParkingStatus = ParkingStatus.UNKNOWN
    private val notificationsList = mutableListOf<NotificationItem>()
    private var isWebSocketConnected = false
    private var lastDataUpdateTime = 0L

    // Auto-refresh handler
    private val refreshHandler = Handler(Looper.getMainLooper())
    private var refreshRunnable: Runnable? = null

    // ========== LIFECYCLE METHODS ==========

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // B∆Ø·ªöC 1: Set layout TR∆Ø·ªöC TI√äN
        setContentView(R.layout.activity_main)

        // B∆Ø·ªöC 2: Kh·ªüi t·∫°o components SAU KHI c√≥ layout
        try {
            initializeComponents()
            initializeServices() // T√°ch ri√™ng
            setupClickListeners()
            checkPermissions()
            initializeWebSocket()
            setupWebSocketCallbacks()
            loadNotificationsFromStorage()
            checkUserAuthentication()

            if (sharedPrefsHelper.isUserLoggedIn()) {
                loadUserData()
                startRealTimeUpdates()
            } else {
                navigateToLogin()
            }
        } catch (e: Exception) {
            Log.e(TAG, "Error in onCreate", e)
            showToast("L·ªói kh·ªüi t·∫°o: ${e.message}")
        }
    }

    private fun initializeServices() {
        sharedPrefsHelper = SharedPrefsHelper(this)
        notificationService = PushNotificationService()
        parkingStatusService = ParkingStatusService(sharedPrefsHelper)
    }

    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üîÑ MainActivity onResume")

        try {
            if (::webSocketManager.isInitialized) {
                Log.d(TAG, "üîå Resuming WebSocket connection...")

                if (!webSocketManager.isConnected()) {
                    Log.d(TAG, "‚ö° WebSocket not connected, reconnecting...")
                    webSocketManager.connect()
                } else {
                    Log.d(TAG, "‚úÖ WebSocket already connected")
                }

                webSocketManager.sendHeartbeat()
                webSocketManager.reportAppState("foreground")
                webSocketManager.requestParkingStatus()
            } else {
                Log.w(TAG, "‚ö†Ô∏è WebSocket manager not initialized")
            }

            if (sharedPrefsHelper.isUserLoggedIn() && !isParkingServiceActive) {
                Log.d(TAG, "‚ö° Resuming parking updates...")
                startRealTimeUpdates()
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error in onResume", e)
        }
    }

    override fun onPause() {
        super.onPause()
        Log.d(TAG, "üîÑ MainActivity onPause")

        try {
            if (::webSocketManager.isInitialized) {
                webSocketManager.reportAppState("background")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error in onPause", e)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üîÑ MainActivity onDestroy")

        try {
            cleanupWebSocket()
            stopParkingStatusUpdates()
            refreshRunnable?.let { refreshHandler.removeCallbacks(it) }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error in onDestroy", e)
        }
    }

    private fun createNotificationView(notification: NotificationItem): View {
        // S·ª≠ d·ª•ng LayoutInflater t·ª´ context
        val inflater = LayoutInflater.from(this)
        val view = inflater.inflate(R.layout.item_notification_small, null)

        val iconView = view.findViewById<ImageView>(R.id.iv_notification_icon)
        val titleView = view.findViewById<TextView>(R.id.tv_notification_title)
        val messageView = view.findViewById<TextView>(R.id.tv_notification_message)
        val timeView = view.findViewById<TextView>(R.id.tv_notification_time)
        val unreadIndicator = view.findViewById<View>(R.id.view_unread_indicator)

        // Set icon based on type
        when (notification.type) {
            NotificationItem.Type.VEHICLE_ENTERED -> {
                iconView.setImageResource(R.drawable.ic_notification) // Thay b·∫±ng icon th·ª±c t·∫ø
                iconView.setColorFilter(ContextCompat.getColor(this, R.color.success_color))
            }
            NotificationItem.Type.VEHICLE_EXITED -> {
                iconView.setImageResource(R.drawable.ic_notification) // Thay b·∫±ng icon th·ª±c t·∫ø
                iconView.setColorFilter(ContextCompat.getColor(this, R.color.info_color))
            }
            else -> {
                iconView.setImageResource(R.drawable.ic_notification)
            }
        }

        // Set text values
        titleView.text = notification.title
        messageView.text = notification.message
        timeView.text = notification.getFormattedTime()
        unreadIndicator.visibility = if (notification.isRead) View.GONE else View.VISIBLE

        // Add click listener
        view.setOnClickListener {
            notification.isRead = true
            unreadIndicator.visibility = View.GONE
            // C√≥ th·ªÉ m·ªü chi ti·∫øt n·∫øu c·∫ßn
            showToast("ƒê√£ ƒë·ªçc: ${notification.title}")
        }

        return view
    }

    // ========== INITIALIZATION METHODS ==========

    private fun initializeComponents() {
        Log.d(TAG, "üîß Initializing UI components...")

        try {
            // Required UI components - CH·ªà KH·ªûI T·∫†O M·ªòT L·∫¶N
            tvUserPlate = findViewById(R.id.tv_user_plate)
            tvCurrentStatus = findViewById(R.id.tv_current_status)
            tvAvailableSpaces = findViewById(R.id.tv_available_spaces)
            tvLastUpdate = findViewById(R.id.tv_last_update)
            ivStatusIcon = findViewById(R.id.iv_status_icon)
            llNotificationsContainer = findViewById(R.id.ll_notifications_container)
            llNoNotifications = findViewById(R.id.ll_no_notifications)
            viewConnectionIndicator = findViewById(R.id.view_connection_indicator)
            tvConnectionStatus = findViewById(R.id.tv_connection_status)

            // Parking Status UI
            tvParkingTotal = findViewById(R.id.tv_parking_total)
            tvParkingAvailable = findViewById(R.id.tv_parking_available)
            tvParkingOccupied = findViewById(R.id.tv_parking_occupied)
            tvParkingPercentage = findViewById(R.id.tv_parking_percentage)
            tvParkingStatusMessage = findViewById(R.id.tv_parking_status_message)
            viewParkingIndicator = findViewById(R.id.view_parking_indicator)
            btnRefreshParking = findViewById(R.id.btn_refresh_parking)
            llParkingInfo = findViewById(R.id.ll_parking_info)
            progressParkingOccupancy = findViewById(R.id.progress_parking_occupancy)

            Log.d(TAG, "‚úÖ Required UI components initialized")

            initializeOptionalWebSocketUI()

            // Initialize services
            sharedPrefsHelper = SharedPrefsHelper(this)
            notificationService = PushNotificationService()
            parkingStatusService = ParkingStatusService(sharedPrefsHelper)

            Log.d(TAG, "‚úÖ Services initialized successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error initializing UI components", e)
            showToast("L·ªói kh·ªüi t·∫°o giao di·ªán: ${e.message}")
        }
    }

    private fun initializeOptionalWebSocketUI() {
        try {
            val webSocketStatusId = resources.getIdentifier("tv_websocket_status", "id", packageName)
            if (webSocketStatusId != 0) {
                tvWebSocketStatus = findViewById(webSocketStatusId)
                Log.d(TAG, "‚úÖ WebSocket status TextView initialized")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è WebSocket status TextView not found in layout (optional)")
            }

            val testWebSocketId = resources.getIdentifier("btn_test_websocket", "id", packageName)
            if (testWebSocketId != 0) {
                btnTestWebSocket = findViewById(testWebSocketId)
                Log.d(TAG, "‚úÖ Test WebSocket button initialized")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è Test WebSocket button not found in layout (optional)")
            }

            val reconnectWebSocketId = resources.getIdentifier("btn_reconnect_websocket", "id", packageName)
            if (reconnectWebSocketId != 0) {
                btnReconnectWebSocket = findViewById(reconnectWebSocketId)
                Log.d(TAG, "‚úÖ Reconnect WebSocket button initialized")
            } else {
                Log.d(TAG, "‚ÑπÔ∏è Reconnect WebSocket button not found in layout (optional)")
            }

        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Error initializing optional WebSocket UI components", e)
            tvWebSocketStatus = null
            btnTestWebSocket = null
            btnReconnectWebSocket = null
        }
    }

    private fun initializeWebSocket() {
        try {
            Log.d(TAG, "üîå Initializing WebSocket Manager...")

            if (!sharedPrefsHelper.isServerConfigured()) {
                Log.w(TAG, "‚ö†Ô∏è Server not configured, using default settings")
                if (sharedPrefsHelper.getServerUrl().isEmpty()) {
                    sharedPrefsHelper.setServerUrl("http://192.168.1.6:5000")
                    Log.d(TAG, "üîß Set default server URL: http://192.168.1.6:5000")
                }
            }

            webSocketManager = WebSocketManager.getInstance(this, sharedPrefsHelper)
            webSocketManager.initializeNotifications()

            Log.d(TAG, "‚úÖ WebSocket Manager initialized successfully")
            Log.d(TAG, "üåê Server URL: ${sharedPrefsHelper.getServerUrl()}")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error initializing WebSocket Manager", e)
            showToast("‚ö†Ô∏è L·ªói kh·ªüi t·∫°o k·∫øt n·ªëi real-time: ${e.message}")
        }
    }

    private fun setupClickListeners() {
        try {
            Log.d(TAG, "üîß Setting up click listeners...")

            findViewById<ImageView>(R.id.iv_settings).setOnClickListener {
                showSettingsMenu()
            }

            findViewById<LinearLayout>(R.id.ll_parking_history).setOnClickListener {
                showParkingHistory()
            }

            findViewById<LinearLayout>(R.id.ll_report_issue).setOnClickListener {
                showReportIssue()
            }

            findViewById<TextView>(R.id.tv_view_all_notifications).setOnClickListener {
                openNotificationHistory()
            }

            findViewById<LinearLayout>(R.id.ll_settings).setOnClickListener {
                showSettingsMenu()
            }

            btnRefreshParking.setOnClickListener {
                refreshParkingData()
            }

            llParkingInfo.setOnClickListener {
                showParkingDetails()
            }

            Log.d(TAG, "‚úÖ Required click listeners set up")

            setupOptionalWebSocketClickListeners()

            Log.d(TAG, "‚úÖ All click listeners setup completed")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error setting up click listeners", e)
        }
    }

    private fun setupOptionalWebSocketClickListeners() {
        try {
            btnTestWebSocket?.setOnClickListener {
                testWebSocketConnection()
            }
            if (btnTestWebSocket != null) {
                Log.d(TAG, "‚úÖ Test WebSocket button listener set")
            }

            btnReconnectWebSocket?.setOnClickListener {
                reconnectWebSocket()
            }
            if (btnReconnectWebSocket != null) {
                Log.d(TAG, "‚úÖ Reconnect WebSocket button listener set")
            }

        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è Error setting up optional WebSocket click listeners", e)
        }
    }

    private fun showReportIssueDialog() {
        try {
            Log.d(TAG, "‚ö†Ô∏è Opening report issue dialog...")

            val options = arrayOf(
                "üöó Xe b·ªã ch·∫∑n l·ªëi ra",
                "üîß Thi·∫øt b·ªã b·ªã h·ªèng",
                "üßπ Khu v·ª±c b·∫©n",
                "üö´ V·ªã tr√≠ b·ªã chi·∫øm d·ª•ng",
                "üì± Kh√°c..."
            )

            AlertDialog.Builder(this)
                .setTitle("‚ö†Ô∏è B√°o c√°o s·ª± c·ªë")
                .setItems(options) { _, which ->
                    val selectedIssue = options[which]
                    handleReportIssue(selectedIssue)
                }
                .setNegativeButton("H·ªßy", null)
                .show()

        } catch (e: Exception) {
            Log.e(TAG, "Error showing report dialog", e)
            showToast("‚ùå L·ªói khi m·ªü form b√°o c√°o")
        }
    }

    private fun handleReportIssue(issue: String) {
        try {
            Log.d(TAG, "üìù Reporting issue: $issue")

            // TODO: Send report to server
            // reportIssueToServer(issue)

            showToast("‚úÖ ƒê√£ g·ª≠i b√°o c√°o: $issue")

        } catch (e: Exception) {
            Log.e(TAG, "Error handling report", e)
            showToast("‚ùå L·ªói khi g·ª≠i b√°o c√°o")
        }
    }

    // ========== WEBSOCKET METHODS ==========

    private fun startRealTimeUpdates() {
        try {
            Log.d(TAG, "üöÄ Starting real-time updates...")

            if (!::webSocketManager.isInitialized) {
                Log.w(TAG, "‚ö†Ô∏è WebSocket manager not initialized, initializing now...")
                initializeWebSocket()
            }

            setupWebSocketCallbacks()
            connectWebSocket()
            startHttpPollingBackup()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error starting real-time updates", e)
            startHttpPollingBackup()
            showToast("‚ö†Ô∏è Ch·ªâ s·ª≠ d·ª•ng c·∫≠p nh·∫≠t HTTP do l·ªói WebSocket")
        }
    }

    private fun addNotificationToRecentList(vehicleNotification: VehicleNotification) {
        try {
            // T·∫°o unique ID d·ª±a tr√™n plate number v√† action
            val uniqueId = "${vehicleNotification.plateNumber}_${vehicleNotification.action}_${System.currentTimeMillis() / 10000}".hashCode()

            // Convert VehicleNotification to NotificationItem
            val notificationItem = NotificationItem(
                id = uniqueId, // S·ª≠ d·ª•ng unique ID
                title = vehicleNotification.title,
                message = buildNotificationMessage(vehicleNotification),
                timestamp = System.currentTimeMillis(),
                type = if (vehicleNotification.action == "entry")
                    NotificationItem.Type.VEHICLE_ENTERED
                else
                    NotificationItem.Type.VEHICLE_EXITED,
                priority = NotificationItem.Priority.HIGH,
                isRead = false,
                isImportant = true,
                data = mapOf(
                    "plate_number" to vehicleNotification.plateNumber,
                    "owner_name" to (vehicleNotification.ownerName ?: ""),
                    "action" to vehicleNotification.action,
                    "parking_duration" to (vehicleNotification.parkingDuration?.toString() ?: ""),
                    "timestamp" to vehicleNotification.timestamp
                )
            )

            // Ki·ªÉm tra duplicate tr∆∞·ªõc khi th√™m
            val isDuplicate = recentNotifications.any { existing ->
                existing.data["plate_number"] == notificationItem.data["plate_number"] &&
                        existing.data["action"] == notificationItem.data["action"] &&
                        Math.abs(existing.timestamp - notificationItem.timestamp) < 10000 // 10 gi√¢y
            }

            if (!isDuplicate) {
                // Th√™m v√†o ƒë·∫ßu danh s√°ch
                recentNotifications.add(0, notificationItem)

                // Gi·ªØ t·ªëi ƒëa 10 notifications g·∫ßn nh·∫•t (tƒÉng t·ª´ 5 l√™n 10)
                if (recentNotifications.size > 10) {
                    recentNotifications.removeAt(recentNotifications.size - 1)
                }

                // C·∫≠p nh·∫≠t UI
                updateNotificationsUI()

                Log.d(TAG, "‚úÖ Added notification to recent list: ${notificationItem.title}")
            } else {
                Log.d(TAG, "‚ö†Ô∏è Notification already exists, skipping duplicate")
            }

        } catch (e: Exception) {
            Log.e(TAG, "Error adding notification to list", e)
        }
    }

    private fun buildNotificationMessage(notification: VehicleNotification): String {
        return buildString {
            append("Xe ${notification.plateNumber}")

            if (!notification.ownerName.isNullOrEmpty()) {
                append(" c·ªßa ${notification.ownerName}")
            }

            append(" ƒë√£ ${if (notification.action == "entry") "v√†o" else "ra kh·ªèi"} b√£i ƒë·ªó")

            if (notification.action == "exit" && notification.parkingDuration != null) {
                val hours = notification.parkingDuration / 60
                val minutes = notification.parkingDuration % 60
                append(" sau ")
                if (hours > 0) {
                    append("${hours}h ${minutes}p")
                } else {
                    append("${minutes} ph√∫t")
                }
            }

            append(" l√∫c ${notification.timestamp}")
        }
    }

    private fun setupWebSocketCallbacks() {
        try {
            Log.d(TAG, "üî° Setting up WebSocket callbacks...")

            webSocketManager.registerParkingStatusCallback("main_activity") { status ->
                Log.d(TAG, "üìä ‚úÖ Received parking status update via WebSocket")
                Log.d(TAG, "üìà Data: ${status.parking_status.available}/${status.parking_status.total} available")

                runOnUiThread {
                    try {
                        updateParkingUIWithRealTimeData(status)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error updating UI with real-time data", e)
                    }
                }
            }

            // FIXED: Ch·ªâ ƒëƒÉng k√Ω vehicle callback m·ªôt l·∫ßn v√† x·ª≠ l√Ω ƒë√∫ng c√°ch
            webSocketManager.registerVehicleCallback("main_vehicle") { notification ->
                Log.d(TAG, "üöó Received vehicle notification: ${notification.title}")

                runOnUiThread {
                    // Ki·ªÉm tra xem notification n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
                    val existingNotification = recentNotifications.find {
                        it.data["plate_number"] == notification.plateNumber &&
                                Math.abs(it.timestamp - System.currentTimeMillis()) < 5000 // Trong v√≤ng 5 gi√¢y
                    }

                    if (existingNotification == null) {
                        // Ch·ªâ th√™m n·∫øu ch∆∞a c√≥ notification t∆∞∆°ng t·ª± g·∫ßn ƒë√¢y
                        addNotificationToRecentList(notification)
                        saveNotificationToStorage(notification)
                    } else {
                        Log.d(TAG, "‚ö†Ô∏è Duplicate notification detected, skipping...")
                    }
                }
            }

            webSocketManager.registerConnectionCallback("main_activity") { connected ->
                Log.d(TAG, "üîå ‚úÖ Connection status changed: $connected")

                runOnUiThread {
                    try {
                        updateWebSocketConnectionStatus(connected)
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error updating connection status", e)
                    }
                }
            }

            // REMOVED: Kh√¥ng ƒëƒÉng k√Ω notification callback chung ƒë·ªÉ tr√°nh duplicate
            // webSocketManager.registerNotificationCallback() ƒë√£ b·ªã x√≥a

            Log.d(TAG, "‚úÖ WebSocket callbacks registered successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error setting up WebSocket callbacks", e)
        }
    }


    private fun connectWebSocket() {
        try {
            if (!sharedPrefsHelper.isServerConfigured()) {
                Log.w(TAG, "‚ö†Ô∏è Server not configured for WebSocket")
                showServerConfigDialog()
                return
            }

            val serverUrl = sharedPrefsHelper.getServerUrl()
            Log.d(TAG, "üîå Connecting WebSocket to: $serverUrl")

            webSocketManager.connect()
            updateWebSocketConnectionStatus(false, "ƒêang k·∫øt n·ªëi...")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error connecting WebSocket", e)
            updateWebSocketConnectionStatus(false, "L·ªói k·∫øt n·ªëi")
        }
    }

    private fun updateParkingUIWithRealTimeData(status: ParkingStatusService.ParkingStatusData) {
        try {
            val parkingInfo = status.parking_status
            lastDataUpdateTime = System.currentTimeMillis()

            Log.d(TAG, "üìä ‚úÖ Updating UI with REAL-TIME WebSocket data")
            Log.d(TAG, "üìà Available: ${parkingInfo.available}/${parkingInfo.total}")
            Log.d(TAG, "üìä Percentage: ${parkingInfo.percentage_full}%")

            tvParkingTotal.text = parkingInfo.total.toString()
            tvParkingAvailable.text = parkingInfo.available.toString()
            tvParkingOccupied.text = parkingInfo.occupied.toString()
            tvParkingPercentage.text = "${parkingInfo.percentage_full.toInt()}%"

            tvParkingStatusMessage.text = "üî¥ LIVE: ${status.status_message}"

            ObjectAnimator.ofInt(progressParkingOccupancy, "progress", parkingInfo.percentage_full.toInt())
                .setDuration(1000)
                .start()

            val colorResource = when {
                parkingInfo.available == 0 -> R.color.parking_full
                parkingInfo.available <= 3 -> R.color.parking_warning
                parkingInfo.available <= 8 -> R.color.parking_occupied
                else -> R.color.parking_available
            }

            viewParkingIndicator.setBackgroundTintList(
                ContextCompat.getColorStateList(this, colorResource)
            )

            tvAvailableSpaces.text = if (parkingInfo.available > 0) {
                "${parkingInfo.available} ch·ªó tr·ªëng"
            } else {
                "H·∫øt ch·ªó ƒë·ªó"
            }

            val currentTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
            tvLastUpdate.text = "üî¥ LIVE: $currentTime"

            cacheParkingData(status)
            llParkingInfo.visibility = View.VISIBLE

            Log.d(TAG, "‚úÖ Real-time UI update completed successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating real-time UI", e)
            showToast("L·ªói c·∫≠p nh·∫≠t giao di·ªán real-time")
        }
    }

    private fun updateWebSocketConnectionStatus(connected: Boolean, customMessage: String? = null) {
        try {
            isWebSocketConnected = connected
            Log.d(TAG, "üîå Updating connection status: connected=$connected, message='$customMessage'")

            if (connected) {
                viewConnectionIndicator.setBackgroundTintList(
                    ContextCompat.getColorStateList(this, R.color.success_color)
                )
                tvConnectionStatus.text = customMessage ?: "üî¥ LIVE"
                tvConnectionStatus.setTextColor(ContextCompat.getColor(this, R.color.success_color))

                tvWebSocketStatus?.let { statusView ->
                    statusView.text = "WebSocket: Connected"
                    statusView.setTextColor(ContextCompat.getColor(this, R.color.success_color))
                }

            } else {
                viewConnectionIndicator.setBackgroundTintList(
                    ContextCompat.getColorStateList(this, R.color.warning_color)
                )
                tvConnectionStatus.text = customMessage ?: "OFFLINE"
                tvConnectionStatus.setTextColor(ContextCompat.getColor(this, R.color.warning_color))

                tvWebSocketStatus?.let { statusView ->
                    statusView.text = customMessage ?: "WebSocket: Disconnected"
                    statusView.setTextColor(ContextCompat.getColor(this, R.color.error_color))
                }

                if (customMessage == null) {
                    scheduleWebSocketReconnect()
                }
            }

            Log.d(TAG, "‚úÖ WebSocket connection status updated: $connected")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating connection status", e)
        }
    }

    private fun handleRealTimeNotification(notification: NotificationItem) {
        try {
            Log.d(TAG, "üì± ‚úÖ Handling real-time notification: ${notification.title}")

            addNotificationToUI(notification)

            if (notification.isImportant) {
                showToast("üì± ${notification.title}")
            }

            when (notification.type) {
                NotificationItem.Type.PARKING_FULL -> {
                    showParkingFullAlert()
                }
                NotificationItem.Type.SPACE_AVAILABLE -> {
                    showSpaceAvailableAlert()
                }
                NotificationItem.Type.URGENT_ALERT -> {
                    showUrgentAlert(notification)
                }
                else -> {
                    Log.d(TAG, "üì± Handled notification type: ${notification.type}")
                }
            }

            updateNotificationBadge()

            Log.d(TAG, "‚úÖ Real-time notification handled successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error handling real-time notification", e)
        }
    }

    private fun scheduleWebSocketReconnect() {
        Log.d(TAG, "‚è∞ Scheduling WebSocket reconnection...")

        refreshHandler.postDelayed({
            try {
                if (!isWebSocketConnected && ::webSocketManager.isInitialized) {
                    Log.d(TAG, "‚ö° Attempting scheduled WebSocket reconnection...")
                    updateWebSocketConnectionStatus(false, "ƒêang k·∫øt n·ªëi l·∫°i...")
                    webSocketManager.connect()
                } else {
                    Log.d(TAG, "‚ÑπÔ∏è Skipping reconnect - already connected or manager not initialized")
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Error during scheduled reconnect", e)
            }
        }, WEBSOCKET_RECONNECT_DELAY)
    }

    // ========== DATA REFRESH METHODS ==========

    private fun refreshAllData() {
        try {
            Log.d(TAG, "‚ö° Refreshing all data...")

            if (isWebSocketConnected && ::webSocketManager.isInitialized) {
                Log.d(TAG, "üì° Requesting data via WebSocket...")
                webSocketManager.requestParkingStatus()
                showToast("üì° Requesting real-time data...")
            } else {
                Log.d(TAG, "üåê Falling back to HTTP request...")
                refreshParkingDataHttp()
                showToast("‚ö° Loading data via HTTP...")
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error refreshing all data", e)
            refreshParkingDataHttp()
        }
    }

    private fun refreshParkingData() {
        if (isWebSocketConnected && ::webSocketManager.isInitialized) {
            Log.d(TAG, "üì° Refreshing parking data via WebSocket...")
            webSocketManager.requestParkingStatus()
            showToast("üì° Real-time data requested")
        } else {
            Log.d(TAG, "üåê Refreshing parking data via HTTP...")
            refreshParkingDataHttp()
        }
    }

    private fun refreshParkingDataHttp() {
        if (!sharedPrefsHelper.isServerConfigured()) {
            showServerConfigDialog()
            return
        }

        Log.d(TAG, "üåê Starting HTTP parking data refresh...")
        showParkingLoading(true)
        updateConnectionStatus(false)

        parkingStatusService.loginAndGetParkingStatus(object : ParkingStatusService.ParkingStatusCallback {
            override fun onStatusUpdated(status: ParkingStatusService.ParkingStatusData) {
                runOnUiThread {
                    try {
                        Log.d(TAG, "‚úÖ HTTP parking data received")
                        updateParkingUIWithHttpData(status)
                        cacheParkingData(status)
                        updateConnectionStatus(true)
                        showParkingLoading(false)
                        showToast("‚úÖ D·ªØ li·ªáu c·∫≠p nh·∫≠t qua HTTP")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå Error processing HTTP data", e)
                        handleParkingDataError("L·ªói x·ª≠ l√Ω d·ªØ li·ªáu HTTP")
                    }
                }
            }

            override fun onError(error: String) {
                runOnUiThread {
                    Log.e(TAG, "‚ùå HTTP parking data error: $error")
                    handleParkingDataError(error)
                    loadCachedParkingStatus()
                }
            }
        })
    }

    private fun updateParkingUIWithHttpData(status: ParkingStatusService.ParkingStatusData) {
        try {
            val parkingInfo = status.parking_status

            Log.d(TAG, "üåê ‚úÖ Updating UI with HTTP data")
            Log.d(TAG, "üìà Available: ${parkingInfo.available}/${parkingInfo.total}")

            tvParkingTotal.text = parkingInfo.total.toString()
            tvParkingAvailable.text = parkingInfo.available.toString()
            tvParkingOccupied.text = parkingInfo.occupied.toString()
            tvParkingPercentage.text = "${parkingInfo.percentage_full.toInt()}%"

            tvParkingStatusMessage.text = "üì° HTTP: ${status.status_message}"

            progressParkingOccupancy.progress = parkingInfo.percentage_full.toInt()

            val colorResource = when {
                parkingInfo.available == 0 -> R.color.parking_full
                parkingInfo.available <= 3 -> R.color.parking_warning
                parkingInfo.available <= 8 -> R.color.parking_occupied
                else -> R.color.parking_available
            }

            viewParkingIndicator.setBackgroundTintList(
                ContextCompat.getColorStateList(this, colorResource)
            )

            tvAvailableSpaces.text = if (parkingInfo.available > 0) {
                "${parkingInfo.available} ch·ªó tr·ªëng"
            } else {
                "H·∫øt ch·ªó ƒë·ªó"
            }

            val currentTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
            tvLastUpdate.text = "üì° HTTP: $currentTime"

            llParkingInfo.visibility = View.VISIBLE

            Log.d(TAG, "‚úÖ HTTP UI update completed")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating HTTP UI", e)
        }
    }

    private fun startHttpPollingBackup() {
        if (!isWebSocketConnected) {
            Log.d(TAG, "‚ö° Starting HTTP polling backup...")
            startPeriodicHttpUpdates()
        } else {
            Log.d(TAG, "‚ÑπÔ∏è Skipping HTTP polling - WebSocket is connected")
        }
    }

    private fun startPeriodicHttpUpdates() {
        if (isParkingServiceActive) {
            Log.d(TAG, "‚ÑπÔ∏è HTTP polling already active")
            return
        }

        try {
            Log.d(TAG, "‚ö° Starting periodic HTTP updates...")

            parkingStatusService.startPeriodicUpdates(object : ParkingStatusService.ParkingStatusCallback {
                override fun onStatusUpdated(status: ParkingStatusService.ParkingStatusData) {
                    runOnUiThread {
                        if (!isWebSocketConnected) {
                            Log.d(TAG, "üìä HTTP periodic update received")
                            updateParkingUIWithHttpData(status)
                            cacheParkingData(status)
                        } else {
                            Log.d(TAG, "‚ÑπÔ∏è Skipping HTTP update - WebSocket is now connected")
                        }
                    }
                }

                override fun onError(error: String) {
                    runOnUiThread {
                        if (!isWebSocketConnected) {
                            Log.e(TAG, "‚ùå HTTP periodic update error: $error")
                            handleParkingDataError(error)
                        }
                    }
                }
            })

            isParkingServiceActive = true
            Log.d(TAG, "‚úÖ HTTP polling backup started successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error starting HTTP polling", e)
        }
    }

    // ========== WEBSOCKET CONTROLS ==========

    private fun testWebSocketConnection() {
        try {
            Log.d(TAG, "üß™ Testing WebSocket connection...")

            if (!::webSocketManager.isInitialized) {
                showToast("‚ùå WebSocket manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                return
            }

            val isConnected = webSocketManager.isConnected()
            val isHealthy = webSocketManager.isConnectionHealthy()
            val testResult = webSocketManager.testConnection()

            val message = """
                üîå Connected: $isConnected
                üíö Healthy: $isHealthy
                üß™ Test: $testResult
                üåê Server: ${sharedPrefsHelper.getServerUrl()}
            """.trimIndent()

            showToast(message)
            Log.d(TAG, "üß™ WebSocket test completed: connected=$isConnected, healthy=$isHealthy, test=$testResult")

            showWebSocketStatusDialog()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error testing WebSocket", e)
            showToast("L·ªói test WebSocket: ${e.message}")
        }
    }

    private fun reconnectWebSocket() {
        try {
            Log.d(TAG, "‚ö° Force WebSocket reconnection requested")

            if (!::webSocketManager.isInitialized) {
                showToast("‚ùå WebSocket manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                return
            }

            showToast("‚ö° ƒêang k·∫øt n·ªëi l·∫°i WebSocket...")
            updateWebSocketConnectionStatus(false, "ƒêang k·∫øt n·ªëi l·∫°i...")

            webSocketManager.forceReconnect()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error reconnecting WebSocket", e)
            showToast("L·ªói k·∫øt n·ªëi l·∫°i: ${e.message}")
        }
    }

    private fun showWebSocketStatusDialog() {
        try {
            if (!::webSocketManager.isInitialized) {
                showToast("‚ùå WebSocket manager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
                return
            }

            val status = webSocketManager.getDetailedStatus()
            val connectionInfo = webSocketManager.getConnectionInfo()

            val message = buildString {
                appendLine("üîå WebSocket Status Details:")
                appendLine("")
                appendLine("Connection: ${if (isWebSocketConnected) "‚úÖ Connected" else "‚ùå Disconnected"}")
                appendLine("Server: ${sharedPrefsHelper.getServerUrl()}")
                appendLine("Health: ${if (webSocketManager.isConnectionHealthy()) "üíö Healthy" else "üíî Unhealthy"}")
                appendLine("Socket ID: ${connectionInfo["socket_id"]}")
                appendLine("")
                appendLine("Callbacks Registered:")
                val callbacks = status["callbacks"] as? Map<*, *>
                callbacks?.forEach { (key, value) ->
                    appendLine("‚Ä¢ $key: $value")
                }
                appendLine("")
                appendLine("Last Update: ${SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())}")
            }

            AlertDialog.Builder(this)
                .setTitle("WebSocket Status")
                .setMessage(message)
                .setPositiveButton("OK", null)
                .setNeutralButton("Test") { _, _ -> testWebSocketConnection() }
                .setNegativeButton("Reconnect") { _, _ -> reconnectWebSocket() }
                .show()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing status dialog", e)
            showToast("L·ªói hi·ªÉn th·ªã tr·∫°ng th√°i WebSocket")
        }
    }

    // ========== CLEANUP METHODS ==========

    private fun cleanupWebSocket() {
        try {
            if (::webSocketManager.isInitialized) {
                Log.d(TAG, "üßπ Cleaning up WebSocket resources...")

                webSocketManager.unregisterParkingStatusCallback("main_activity")
                webSocketManager.unregisterConnectionCallback("main_activity")
                webSocketManager.unregisterNotificationCallback("main_activity")

                Log.d(TAG, "‚úÖ WebSocket callbacks unregistered")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error cleaning up WebSocket", e)
        }
    }

    // ========== UTILITY METHODS ==========

    private fun checkUserAuthentication() {
        if (!sharedPrefsHelper.isUserLoggedIn()) {
            Log.w(TAG, "‚ö†Ô∏è User not authenticated, navigating to login")
            navigateToLogin()
            return
        }
        updateUserInfo()
    }

    private fun loadUserData() {
        val vehicleSession = sharedPrefsHelper.getVehicleSession()
        if (vehicleSession != null) {
            tvUserPlate.text = vehicleSession.getDisplayName()
            loadNotificationHistory()
            Log.d(TAG, "‚úÖ User data loaded: ${vehicleSession.plateNumber}")
        } else {
            val userName = sharedPrefsHelper.getUserFullName()
            tvUserPlate.text = if (userName.isNotEmpty()) {
                "Xin ch√†o $userName\nCh∆∞a c√≥ th√¥ng tin xe"
            } else {
                "Ch∆∞a ƒëƒÉng nh·∫≠p"
            }
            Log.d(TAG, "‚ö†Ô∏è No vehicle session found")
        }
    }

    private fun cacheParkingData(status: ParkingStatusService.ParkingStatusData) {
        try {
            sharedPrefsHelper.cacheParkingStatus(
                status.parking_status.total,
                status.parking_status.available,
                status.parking_status.occupied,
                status.parking_status.percentage_full,
                status.status_message
            )
            Log.d(TAG, "‚úÖ Parking data cached successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error caching parking data", e)
        }
    }

    private fun loadCachedParkingStatus() {
        try {
            val cachedData = sharedPrefsHelper.getCachedParkingStatus()
            if (cachedData != null) {
                Log.d(TAG, "üì¶ Loading cached parking status")
                val status = ParkingStatusService.ParkingStatusData(
                    parking_status = ParkingStatusService.ParkingInfo(
                        total = cachedData.total,
                        available = cachedData.available,
                        occupied = cachedData.occupied,
                        percentage_full = cachedData.percentage
                    ),
                    status_message = cachedData.message,
                    last_updated = "Cached: ${SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date(cachedData.cacheTime))}",
                    color_indicator = "gray"
                )
                updateParkingUIWithHttpData(status)
            } else {
                Log.d(TAG, "üì¶ No cached parking data available")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error loading cached data", e)
        }
    }

    private fun showParkingLoading(loading: Boolean) {
        try {
            if (loading) {
                tvParkingStatusMessage.text = "‚ö° ƒêang t·∫£i d·ªØ li·ªáu..."
                progressParkingOccupancy.isIndeterminate = true
            } else {
                progressParkingOccupancy.isIndeterminate = false
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing loading state", e)
        }
    }

    private fun handleParkingDataError(error: String) {
        Log.e(TAG, "‚ùå Parking data error: $error")
        showToast("‚ùå $error")
        updateConnectionStatus(false)
        showParkingLoading(false)
    }

    private fun updateConnectionStatus(connected: Boolean) {
        try {
            if (connected) {
                viewConnectionIndicator.setBackgroundTintList(
                    ContextCompat.getColorStateList(this, R.color.success_color)
                )
                tvConnectionStatus.text = "HTTP OK"
            } else {
                viewConnectionIndicator.setBackgroundTintList(
                    ContextCompat.getColorStateList(this, R.color.error_color)
                )
                tvConnectionStatus.text = "HTTP ERROR"
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating basic connection status", e)
        }
    }

    private fun stopParkingStatusUpdates() {
        isParkingServiceActive = false
        try {
            parkingStatusService.stopPeriodicUpdates()
            Log.d(TAG, "‚úÖ Parking status updates stopped")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error stopping parking updates", e)
        }
    }

    // ========== NOTIFICATION HANDLING ==========

    private fun addNotificationToUI(notification: NotificationItem) {
        try {
            notificationsList.add(0, notification)
            if (notificationsList.size > MAX_VISIBLE_NOTIFICATIONS) {
                notificationsList.removeAt(notificationsList.size - 1)
            }
            updateNotificationsUI()
            Log.d(TAG, "‚úÖ Notification added to UI: ${notification.title}")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error adding notification to UI", e)
        }
    }

    private fun updateNotificationsUI() {
        runOnUiThread {
            notificationsContainer.removeAllViews()

            if (recentNotifications.isEmpty()) {
                noNotificationsView.visibility = View.VISIBLE
                notificationsContainer.visibility = View.GONE
            } else {
                noNotificationsView.visibility = View.GONE
                notificationsContainer.visibility = View.VISIBLE

                // Hi·ªÉn th·ªã t·ªëi ƒëa 3 notifications g·∫ßn nh·∫•t
                recentNotifications.take(3).forEach { notification ->
                    val notificationView = createNotificationView(notification)
                    notificationsContainer.addView(notificationView)
                }
            }
        }
    }

    private fun updateNotificationBadge() {
        try {
            val unreadCount = notificationsList.count { !it.isRead }
            Log.d(TAG, "üì± Notification badge updated: $unreadCount unread")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating notification badge", e)
        }
    }

    private fun loadNotificationHistory() {
        try {
            Log.d(TAG, "üì± Loading notification history...")

            val sampleNotifications = listOf(
                NotificationItem.createSpaceAvailableNotification(5, 20),
                NotificationItem.createSystemMaintenanceNotification("B·∫£o tr√¨ ƒë·ªãnh k·ª≥", "30 ph√∫t"),
                NotificationItem.createParkingFullNotification(20, "14:30")
            )

            notificationsList.clear()
            notificationsList.addAll(sampleNotifications)
            updateNotificationsUI()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error loading notification history", e)
        }
    }

    private fun sendTestNotification() {
        try {
            val testNotification = NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "üß™ Test Notification",
                message = "ƒê√¢y l√† th√¥ng b√°o test t·ª´ ${SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())}",
                timestamp = System.currentTimeMillis(),
                type = NotificationItem.Type.SYSTEM_UPDATE,
                priority = NotificationItem.Priority.NORMAL
            )

            notificationService.showNotification(this, testNotification.title, testNotification.message)
            addNotificationToUI(testNotification)

            showToast("üì± Test notification sent")
            Log.d(TAG, "‚úÖ Test notification sent successfully")

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error sending test notification", e)
            showToast("L·ªói g·ª≠i test notification")
        }
    }

    // ========== ALERT DIALOGS ==========

    private fun showParkingFullAlert() {
        try {
            AlertDialog.Builder(this)
                .setTitle("üö´ B√£i ƒë·ªó xe ƒë√£ ƒë·∫ßy")
                .setMessage("Hi·ªán t·∫°i kh√¥ng c√≤n ch·ªó ƒë·ªó tr·ªëng. Vui l√≤ng ch·ªù ho·∫∑c t√¨m b√£i kh√°c.")
                .setPositiveButton("OK", null)
                .setNeutralButton("Xem chi ti·∫øt") { _, _ -> showParkingDetails() }
                .show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing parking full alert", e)
        }
    }

    private fun showSpaceAvailableAlert() {
        try {
            val available = tvParkingAvailable.text.toString().toIntOrNull() ?: 0
            AlertDialog.Builder(this)
                .setTitle("‚úÖ C√≥ ch·ªó ƒë·ªó tr·ªëng!")
                .setMessage("Hi·ªán c√≥ $available ch·ªó ƒë·ªó tr·ªëng. Nhanh tay ƒë·∫øn b√£i xe!")
                .setPositiveButton("OK", null)
                .setNeutralButton("Xem v·ªã tr√≠") { _, _ -> showParkingDetails() }
                .show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing space available alert", e)
        }
    }

    private fun showUrgentAlert(notification: NotificationItem) {
        try {
            AlertDialog.Builder(this)
                .setTitle("üö® ${notification.title}")
                .setMessage(notification.message)
                .setPositiveButton("OK", null)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing urgent alert", e)
        }
    }

    private fun showParkingDetails() {
        try {
            val total = tvParkingTotal.text.toString().toIntOrNull() ?: 0
            val available = tvParkingAvailable.text.toString().toIntOrNull() ?: 0
            val occupied = tvParkingOccupied.text.toString().toIntOrNull() ?: 0
            val percentage = tvParkingPercentage.text.toString().replace("%", "").toIntOrNull() ?: 0

            val message = buildString {
                appendLine("üìä Chi ti·∫øt b√£i ƒë·ªó xe:")
                appendLine("")
                appendLine("üè≠Ô∏è T·ªïng s·ªë ch·ªó: $total")
                appendLine("‚úÖ Ch·ªó tr·ªëng: $available")
                appendLine("üöó ƒê√£ c√≥ xe: $occupied")
                appendLine("üìà T·ª∑ l·ªá s·ª≠ d·ª•ng: $percentage%")
                appendLine("")
                appendLine("‚ö° C·∫≠p nh·∫≠t: ${tvLastUpdate.text}")
                appendLine("üîå K·∫øt n·ªëi: ${if (isWebSocketConnected) "Real-time" else "HTTP"}")
            }

            AlertDialog.Builder(this)
                .setTitle("Chi ti·∫øt b√£i ƒë·ªó xe")
                .setMessage(message)
                .setPositiveButton("OK", null)
                .setNeutralButton("L√†m m·ªõi") { _, _ -> refreshParkingData() }
                .show()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing parking details", e)
        }
    }

    private fun showServerConfigDialog() {
        try {
            val dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_server_config, null)
            val etServerUrl = dialogView.findViewById<EditText>(R.id.et_server_url)

            etServerUrl.setText(sharedPrefsHelper.getServerUrl())

            AlertDialog.Builder(this)
                .setTitle("C·∫•u h√¨nh Server")
                .setView(dialogView)
                .setPositiveButton("L∆∞u") { _, _ ->
                    val newUrl = etServerUrl.text.toString().trim()
                    if (newUrl.isNotEmpty()) {
                        sharedPrefsHelper.setServerUrl(newUrl)
                        showToast("‚úÖ ƒê√£ l∆∞u URL server: $newUrl")

                        if (::webSocketManager.isInitialized) {
                            webSocketManager.forceReconnect()
                        }
                    }
                }
                .setNegativeButton("H·ªßy", null)
                .show()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing server config dialog", e)
            showToast("L·ªói hi·ªÉn th·ªã dialog c·∫•u h√¨nh server")
        }
    }

    private fun showSettingsMenu() {
        try {
            val options = arrayOf(
                "‚öôÔ∏è C√†i ƒë·∫∑t ·ª©ng d·ª•ng",
                "üîß C·∫•u h√¨nh server",
                "üîå Tr·∫°ng th√°i WebSocket",
                "üì± Test notification",
                "üßπ X√≥a cache",
                "üö™ ƒêƒÉng xu·∫•t"
            )

            AlertDialog.Builder(this)
                .setTitle("C√†i ƒë·∫∑t")
                .setItems(options) { _, which ->
                    when (which) {
                        0 -> openAppSettings()
                        1 -> showServerConfigDialog()
                        2 -> showWebSocketStatusDialog()
                        3 -> sendTestNotification()
                        4 -> clearCache()
                        5 -> logout()
                    }
                }
                .show()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing settings menu", e)
        }
    }

    private fun showParkingHistory() {
        try {
            Log.d(TAG, "üìã Opening parking history...")
            val intent = Intent(this, ParkingHistoryActivity::class.java)
            startActivity(intent)
            showToast("üìã L·ªãch s·ª≠ ƒë·ªó xe")
        } catch (e: Exception) {
            Log.e(TAG, "Error opening parking history", e)
            showToast("‚ùå L·ªói khi m·ªü l·ªãch s·ª≠ ƒë·ªó xe")
        }
    }

    private fun showReportIssue() {
        try {
            Log.d(TAG, "‚ö†Ô∏è Opening report issue...")
            val intent = Intent(this, ReportIssueActivity::class.java)
            startActivity(intent)
            showToast("‚ö†Ô∏è B√°o c√°o s·ª± c·ªë")
        } catch (e: Exception) {
            Log.e(TAG, "Error opening report issue", e)
            showToast("‚ùå L·ªói khi m·ªü form b√°o c√°o")
        }
    }

    // ========== NAVIGATION AND SYSTEM ==========

    private fun openAppSettings() {
        try {
            val intent = Intent(this, SettingsActivity::class.java)
            startActivity(intent)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error opening app settings", e)
            showToast("Kh√¥ng th·ªÉ m·ªü c√†i ƒë·∫∑t ·ª©ng d·ª•ng")
        }
    }

    private fun openNotificationHistory() {
        try {
            val intent = Intent(this, NotificationHistoryActivity::class.java)
            startActivity(intent)
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error opening notification history", e)
            showToast("Kh√¥ng th·ªÉ m·ªü l·ªãch s·ª≠ th√¥ng b√°o")
        }
    }

    private fun clearCache() {
        try {
            sharedPrefsHelper.clearCache()
            showToast("‚úÖ ƒê√£ x√≥a cache")
            refreshAllData()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error clearing cache", e)
            showToast("L·ªói x√≥a cache")
        }
    }

    private fun logout() {
        try {
            AlertDialog.Builder(this)
                .setTitle("ƒêƒÉng xu·∫•t")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?")
                .setPositiveButton("ƒêƒÉng xu·∫•t") { _, _ ->
                    performLogout()
                }
                .setNegativeButton("H·ªßy", null)
                .show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing logout dialog", e)
        }
    }

    private fun performLogout() {
        try {
            if (::webSocketManager.isInitialized) {
                webSocketManager.disconnect()
            }

            sharedPrefsHelper.logout()
            navigateToLogin()

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error performing logout", e)
        }
    }

    private fun navigateToLogin() {
        try {
            val intent = Intent(this, LoginActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            startActivity(intent)
            finish()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error navigating to login", e)
        }
    }

    private fun updateUserInfo() {
        try {
            val userName = sharedPrefsHelper.getUserFullName()
            if (userName.isNotEmpty()) {
                Log.d(TAG, "‚úÖ User info updated for: $userName")
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error updating user info", e)
        }
    }

    private fun checkPermissions() {
        try {
            val permissions = arrayOf(
                Manifest.permission.POST_NOTIFICATIONS,
                Manifest.permission.INTERNET,
                Manifest.permission.ACCESS_NETWORK_STATE
            )

            val missingPermissions = permissions.filter {
                ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
            }

            if (missingPermissions.isNotEmpty()) {
                ActivityCompat.requestPermissions(
                    this,
                    missingPermissions.toTypedArray(),
                    PERMISSION_REQUEST_CODE
                )
            }

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error checking permissions", e)
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == PERMISSION_REQUEST_CODE) {
            val allGranted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }
            if (allGranted) {
                Log.d(TAG, "‚úÖ All permissions granted")
                showToast("‚úÖ ƒê√£ c·∫•p quy·ªÅn th√†nh c√¥ng")
            } else {
                Log.w(TAG, "‚ö†Ô∏è Some permissions denied")
                showToast("‚ö†Ô∏è M·ªôt s·ªë quy·ªÅn b·ªã t·ª´ ch·ªëi")
            }
        }
    }

    private fun showToast(message: String) {
        try {
            Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error showing toast", e)
        }
    }

    private fun saveNotificationToStorage(vehicleNotification: VehicleNotification) {
        try {
            val sharedPrefs = getSharedPreferences("notifications", Context.MODE_PRIVATE)

            // L·∫•y danh s√°ch notifications hi·ªán t·∫°i
            val existingJson = sharedPrefs.getString("notification_list", "[]") ?: "[]"
            val notificationsList = JSONArray(existingJson)

            // T·∫°o JSON object cho notification m·ªõi
            val notificationJson = JSONObject().apply {
                put("id", vehicleNotification.id)
                put("title", vehicleNotification.title)
                put("message", buildNotificationMessage(vehicleNotification))
                put("plate_number", vehicleNotification.plateNumber)
                put("owner_name", vehicleNotification.ownerName ?: "")
                put("action", vehicleNotification.action)
                put("timestamp", System.currentTimeMillis())
                put("parking_duration", vehicleNotification.parkingDuration ?: 0)
                put("is_read", false)
                put("type", if (vehicleNotification.action == "entry") "VEHICLE_ENTERED" else "VEHICLE_EXITED")
            }

            // Th√™m v√†o ƒë·∫ßu danh s√°ch
            val newList = JSONArray()
            newList.put(notificationJson)

            // Copy existing notifications (gi·ªØ t·ªëi ƒëa 100)
            for (i in 0 until minOf(notificationsList.length(), 99)) {
                newList.put(notificationsList.getJSONObject(i))
            }

            // L∆∞u l·∫°i
            sharedPrefs.edit()
                .putString("notification_list", newList.toString())
                .apply()

            Log.d(TAG, "‚úÖ Saved notification to storage")

        } catch (e: Exception) {
            Log.e(TAG, "Error saving notification to storage", e)
        }
    }

    // Load notifications t·ª´ storage khi app kh·ªüi ƒë·ªông
    private fun loadNotificationsFromStorage() {
        try {
            val sharedPrefs = getSharedPreferences("notifications", Context.MODE_PRIVATE)
            val notificationsJson = sharedPrefs.getString("notification_list", "[]") ?: "[]"
            val notificationsList = JSONArray(notificationsJson)

            recentNotifications.clear()

            // Load t·ªëi ƒëa 5 notifications g·∫ßn nh·∫•t
            for (i in 0 until minOf(notificationsList.length(), 5)) {
                val json = notificationsList.getJSONObject(i)

                val notification = NotificationItem(
                    id = json.optInt("id"),
                    title = json.optString("title"),
                    message = json.optString("message"),
                    timestamp = json.optLong("timestamp"),
                    type = NotificationItem.Type.fromString(json.optString("type", "SYSTEM_UPDATE")),
                    isRead = json.optBoolean("is_read", false),
                    priority = NotificationItem.Priority.HIGH,
                    data = mapOf(
                        "plate_number" to json.optString("plate_number"),
                        "owner_name" to json.optString("owner_name"),
                        "action" to json.optString("action")
                    )
                )

                recentNotifications.add(notification)
            }

            updateNotificationsUI()
            Log.d(TAG, "‚úÖ Loaded ${recentNotifications.size} notifications from storage")

        } catch (e: Exception) {
            Log.e(TAG, "Error loading notifications from storage", e)
        }
    }
}