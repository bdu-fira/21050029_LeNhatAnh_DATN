package com.example.parkingmobiapp.models

import android.os.Parcelable
import kotlinx.parcelize.Parcelize
import java.text.SimpleDateFormat
import java.util.*

@Parcelize
data class NotificationItem(
    val id: Int,
    val title: String,
    val message: String,
    val timestamp: Long,
    val type: Type,
    var isRead: Boolean = false,
    var isImportant: Boolean = false,
    val data: Map<String, String> = emptyMap(),
    val actionUrl: String? = null,
    val expiryTime: Long? = null,
    val priority: Priority = Priority.NORMAL
) : Parcelable {

    enum class Type(val displayName: String, val emoji: String, val colorRes: String) {
        PARKING_FULL("B√£i ƒë·ªó ƒë·∫ßy", "üö´", "error_color"),
        SPACE_AVAILABLE("C√≥ ch·ªó tr·ªëng", "‚úÖ", "success_color"),
        SPACE_LIMITED("S·∫Øp h·∫øt ch·ªó", "‚ö†Ô∏è", "warning_color"),
        SPACE_FULL("H·∫øt ch·ªó ƒë·ªó", "üö´", "error_color"), // ‚úÖ TH√äM d√≤ng n√†y
        WRONG_POSITION("ƒê·ªó sai v·ªã tr√≠", "‚ùå", "error_color"),
        POSITION_CORRECT("ƒê·ªó ƒë√∫ng v·ªã tr√≠", "‚úÖ", "success_color"),
        OVERSTAY_WARNING("ƒê·ªó qu√° gi·ªù", "‚è∞", "warning_color"),
        SYSTEM_UPDATE("C·∫≠p nh·∫≠t h·ªá th·ªëng", "üîÑ", "info_color"),
        SYSTEM_MAINTENANCE("B·∫£o tr√¨ h·ªá th·ªëng", "üîß", "warning_color"),
        CONNECTION_LOST("M·∫•t k·∫øt n·ªëi", "üì°", "error_color"),
        CONNECTION_RESTORED("K·∫øt n·ªëi ph·ª•c h·ªìi", "üì∂", "success_color"),
        URGENT_ALERT("C·∫£nh b√°o kh·∫©n c·∫•p", "üö®", "error_color"),
        VEHICLE_ENTERED("Xe v√†o b√£i", "üöó", "info_color"),
        VEHICLE_EXITED("Xe ra b√£i", "üöô", "info_color"),
        PAYMENT_DUE("C·∫ßn thanh to√°n", "üí∞", "warning_color"),
        PAYMENT_SUCCESS("Thanh to√°n th√†nh c√¥ng", "‚úÖ", "success_color"),
        SECURITY_ALERT("C·∫£nh b√°o an ninh", "üîí", "error_color"),
        WEATHER_ALERT("C·∫£nh b√°o th·ªùi ti·∫øt", "üåßÔ∏è", "warning_color"),
        PROMOTION("Khuy·∫øn m√£i", "üéâ", "info_color"),
        NEWS("Tin t·ª©c", "üì∞", "info_color"),
        REMINDER("Nh·∫Øc nh·ªü", "‚è∞", "info_color");

        companion object {
            fun fromString(value: String): Type {
                return values().find { it.name.equals(value, ignoreCase = true) } ?: SYSTEM_UPDATE
            }
        }
    }

    enum class Priority(val value: Int, val displayName: String) {
        LOW(1, "Th·∫•p"),
        NORMAL(2, "B√¨nh th∆∞·ªùng"),
        HIGH(3, "Cao"),
        URGENT(4, "Kh·∫©n c·∫•p");

        companion object {
            fun fromInt(value: Int): Priority {
                return values().find { it.value == value } ?: NORMAL
            }
        }
    }

    // Helper methods
    fun getFormattedTime(): String {
        val date = Date(timestamp)
        val now = Date()
        val diff = now.time - timestamp

        return when {
            diff < 60 * 1000 -> "V·ª´a xong"
            diff < 60 * 60 * 1000 -> "${diff / (60 * 1000)} ph√∫t tr∆∞·ªõc"
            diff < 24 * 60 * 60 * 1000 -> "${diff / (60 * 60 * 1000)} gi·ªù tr∆∞·ªõc"
            else -> SimpleDateFormat("dd/MM HH:mm", Locale.getDefault()).format(date)
        }
    }

    fun getDetailedTime(): String {
        return SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault()).format(Date(timestamp))
    }

    fun isExpired(): Boolean {
        return expiryTime?.let { System.currentTimeMillis() > it } ?: false
    }

    fun getTimeUntilExpiry(): String? {
        return expiryTime?.let { expiry ->
            val remaining = expiry - System.currentTimeMillis()
            when {
                remaining <= 0 -> "ƒê√£ h·∫øt h·∫°n"
                remaining < 60 * 1000 -> "H·∫øt h·∫°n trong ${remaining / 1000}s"
                remaining < 60 * 60 * 1000 -> "H·∫øt h·∫°n trong ${remaining / (60 * 1000)}m"
                remaining < 24 * 60 * 60 * 1000 -> "H·∫øt h·∫°n trong ${remaining / (60 * 60 * 1000)}h"
                else -> "H·∫øt h·∫°n trong ${remaining / (24 * 60 * 60 * 1000)} ng√†y"
            }
        }
    }

    fun shouldShowBadge(): Boolean {
        return !isRead && !isExpired() && priority != Priority.LOW
    }

    fun getDisplayTitle(): String {
        val priorityPrefix = when (priority) {
            Priority.URGENT -> "üö® "
            Priority.HIGH -> "‚ö° "
            else -> ""
        }
        return "$priorityPrefix$title"
    }

    fun getShortMessage(maxLength: Int = 50): String {
        return if (message.length <= maxLength) {
            message
        } else {
            "${message.take(maxLength)}..."
        }
    }

    fun hasAction(): Boolean {
        return !actionUrl.isNullOrEmpty()
    }

    fun getDataValue(key: String): String? {
        return data[key]
    }

    // Predefined notification creators
    companion object {
        fun createParkingFullNotification(totalSpaces: Int = 0, lastAvailableTime: String = ""): NotificationItem {
            val message = if (totalSpaces > 0) {
                "T·∫•t c·∫£ $totalSpaces ch·ªó ƒë·ªó ƒë√£ c√≥ xe"
            } else {
                "B√£i ƒë·ªó xe hi·ªán t·∫°i ƒë√£ ƒë·∫ßy"
            }

            val data = mutableMapOf<String, String>().apply {
                if (totalSpaces > 0) put("total_spaces", totalSpaces.toString())
                if (lastAvailableTime.isNotEmpty()) put("last_available_time", lastAvailableTime)
                put("availability", "0")
                put("status", "full")
            }

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "üö´ B√£i ƒë·ªó xe ƒë√£ ƒë·∫ßy",
                message = message,
                timestamp = System.currentTimeMillis(),
                type = Type.PARKING_FULL,
                isImportant = true,
                priority = Priority.HIGH,
                data = data,
                expiryTime = System.currentTimeMillis() + (60 * 60 * 1000) // Expires in 1 hour
            )
        }

        fun createSpaceAvailableNotification(availableSpaces: Int, totalSpaces: Int = 0): NotificationItem {
            val message = if (totalSpaces > 0) {
                "Hi·ªán c√≥ $availableSpaces/$totalSpaces ch·ªó ƒë·ªó tr·ªëng"
            } else {
                "Hi·ªán c√≥ $availableSpaces ch·ªó ƒë·ªó tr·ªëng"
            }

            val data = mutableMapOf<String, String>().apply {
                put("available_spaces", availableSpaces.toString())
                if (totalSpaces > 0) put("total_spaces", totalSpaces.toString())
                put("status", "available")
                put("percentage", ((totalSpaces - availableSpaces) * 100 / totalSpaces).toString())
            }

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "‚úÖ C√≥ ch·ªó ƒë·ªó tr·ªëng!",
                message = message,
                timestamp = System.currentTimeMillis(),
                type = Type.SPACE_AVAILABLE,
                isImportant = true,
                priority = Priority.HIGH,
                data = data,
                expiryTime = System.currentTimeMillis() + (30 * 60 * 1000) // Expires in 30 minutes
            )
        }

        fun createSpaceLimitedNotification(availableSpaces: Int, totalSpaces: Int): NotificationItem {
            val percentage = ((totalSpaces - availableSpaces) * 100 / totalSpaces)
            val message = "Ch·ªâ c√≤n $availableSpaces ch·ªó tr·ªëng ($percentage% ƒë√£ s·ª≠ d·ª•ng)"

            val data = mapOf(
                "available_spaces" to availableSpaces.toString(),
                "total_spaces" to totalSpaces.toString(),
                "percentage" to percentage.toString(),
                "status" to "limited"
            )

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "‚ö†Ô∏è S·∫Øp h·∫øt ch·ªó ƒë·ªó",
                message = message,
                timestamp = System.currentTimeMillis(),
                type = Type.SPACE_LIMITED,
                isImportant = true,
                priority = Priority.HIGH,
                data = data,
                expiryTime = System.currentTimeMillis() + (20 * 60 * 1000) // Expires in 20 minutes
            )
        }

        fun createSystemMaintenanceNotification(maintenanceType: String, duration: String = ""): NotificationItem {
            val message = if (duration.isNotEmpty()) {
                "H·ªá th·ªëng ƒëang b·∫£o tr√¨: $maintenanceType (D·ª± ki·∫øn: $duration)"
            } else {
                "H·ªá th·ªëng ƒëang b·∫£o tr√¨: $maintenanceType"
            }

            val data = mutableMapOf<String, String>().apply {
                put("maintenance_type", maintenanceType)
                if (duration.isNotEmpty()) put("duration", duration)
                put("status", "maintenance")
            }

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "üîß B·∫£o tr√¨ h·ªá th·ªëng",
                message = message,
                timestamp = System.currentTimeMillis(),
                type = Type.SYSTEM_MAINTENANCE,
                priority = Priority.NORMAL,
                data = data
            )
        }

        fun createUrgentAlertNotification(alertType: String, alertMessage: String): NotificationItem {
            val data = mapOf(
                "alert_type" to alertType,
                "alert_level" to "urgent",
                "requires_action" to "true"
            )

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "üö® C·∫£nh b√°o kh·∫©n c·∫•p",
                message = "$alertType: $alertMessage",
                timestamp = System.currentTimeMillis(),
                type = Type.URGENT_ALERT,
                isImportant = true,
                priority = Priority.URGENT,
                data = data,
                expiryTime = System.currentTimeMillis() + (4 * 60 * 60 * 1000) // Expires in 4 hours
            )
        }

        fun createVehicleStatusNotification(plateNumber: String, action: String, location: String = ""): NotificationItem {
            val actionType = when (action.lowercase()) {
                "enter", "entered" -> Type.VEHICLE_ENTERED
                "exit", "exited" -> Type.VEHICLE_EXITED
                else -> Type.SYSTEM_UPDATE
            }

            val title = when (actionType) {
                Type.VEHICLE_ENTERED -> "üöó Xe v√†o b√£i"
                Type.VEHICLE_EXITED -> "üöô Xe ra b√£i"
                else -> "üöó C·∫≠p nh·∫≠t xe"
            }

            val message = if (location.isNotEmpty()) {
                "Xe $plateNumber ƒë√£ ${if (action == "enter") "v√†o" else "ra"} b√£i t·∫°i $location"
            } else {
                "Xe $plateNumber ƒë√£ ${if (action == "enter") "v√†o" else "ra"} b√£i"
            }

            val data = mutableMapOf<String, String>().apply {
                put("plate_number", plateNumber)
                put("action", action)
                if (location.isNotEmpty()) put("location", location)
                put("vehicle_status", action)
            }

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = title,
                message = message,
                timestamp = System.currentTimeMillis(),
                type = actionType,
                priority = Priority.NORMAL,
                data = data,
                expiryTime = System.currentTimeMillis() + (24 * 60 * 60 * 1000) // Expires in 24 hours
            )
        }

        fun createPaymentNotification(amount: Double, status: String, plateNumber: String = ""): NotificationItem {
            val paymentType = when (status.lowercase()) {
                "due", "pending" -> Type.PAYMENT_DUE
                "success", "completed" -> Type.PAYMENT_SUCCESS
                else -> Type.SYSTEM_UPDATE
            }

            val title = when (paymentType) {
                Type.PAYMENT_DUE -> "üí∞ C·∫ßn thanh to√°n"
                Type.PAYMENT_SUCCESS -> "‚úÖ Thanh to√°n th√†nh c√¥ng"
                else -> "üí≥ Th√¥ng tin thanh to√°n"
            }

            val formattedAmount = String.format("%,.0f", amount)
            val message = if (plateNumber.isNotEmpty()) {
                when (paymentType) {
                    Type.PAYMENT_DUE -> "Xe $plateNumber c·∫ßn thanh to√°n ${formattedAmount}ƒë"
                    Type.PAYMENT_SUCCESS -> "ƒê√£ thanh to√°n ${formattedAmount}ƒë cho xe $plateNumber"
                    else -> "Th√¥ng tin thanh to√°n: ${formattedAmount}ƒë"
                }
            } else {
                when (paymentType) {
                    Type.PAYMENT_DUE -> "C·∫ßn thanh to√°n ${formattedAmount}ƒë"
                    Type.PAYMENT_SUCCESS -> "ƒê√£ thanh to√°n ${formattedAmount}ƒë th√†nh c√¥ng"
                    else -> "Th√¥ng tin thanh to√°n: ${formattedAmount}ƒë"
                }
            }

            val data = mutableMapOf<String, String>().apply {
                put("amount", amount.toString())
                put("status", status)
                if (plateNumber.isNotEmpty()) put("plate_number", plateNumber)
                put("currency", "VND")
            }

            val priority = if (paymentType == Type.PAYMENT_DUE) Priority.HIGH else Priority.NORMAL

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = title,
                message = message,
                timestamp = System.currentTimeMillis(),
                type = paymentType,
                isImportant = paymentType == Type.PAYMENT_DUE,
                priority = priority,
                data = data,
                expiryTime = if (paymentType == Type.PAYMENT_DUE) {
                    System.currentTimeMillis() + (24 * 60 * 60 * 1000) // Payment due expires in 24 hours
                } else {
                    null
                }
            )
        }

        fun createConnectionStatusNotification(isConnected: Boolean, serverInfo: String = ""): NotificationItem {
            val connectionType = if (isConnected) Type.CONNECTION_RESTORED else Type.CONNECTION_LOST

            val title = if (isConnected) "üì∂ K·∫øt n·ªëi ph·ª•c h·ªìi" else "üì° M·∫•t k·∫øt n·ªëi"

            val message = if (isConnected) {
                if (serverInfo.isNotEmpty()) "ƒê√£ k·∫øt n·ªëi l·∫°i v·ªõi $serverInfo" else "ƒê√£ k·∫øt n·ªëi l·∫°i v·ªõi server"
            } else {
                "M·∫•t k·∫øt n·ªëi v·ªõi server. Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l∆∞u."
            }

            val data = mutableMapOf<String, String>().apply {
                put("connection_status", if (isConnected) "connected" else "disconnected")
                if (serverInfo.isNotEmpty()) put("server_info", serverInfo)
                put("timestamp", System.currentTimeMillis().toString())
            }

            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = title,
                message = message,
                timestamp = System.currentTimeMillis(),
                type = connectionType,
                priority = if (isConnected) Priority.NORMAL else Priority.HIGH,
                data = data,
                expiryTime = System.currentTimeMillis() + (2 * 60 * 60 * 1000) // Expires in 2 hours
            )
        }

        fun createReminderNotification(reminderTitle: String, reminderMessage: String, actionUrl: String? = null): NotificationItem {
            return NotificationItem(
                id = System.currentTimeMillis().toInt(),
                title = "‚è∞ $reminderTitle",
                message = reminderMessage,
                timestamp = System.currentTimeMillis(),
                type = Type.REMINDER,
                priority = Priority.NORMAL,
                actionUrl = actionUrl,
                data = mapOf(
                    "reminder_type" to "general",
                    "has_action" to (actionUrl != null).toString()
                ),
                expiryTime = System.currentTimeMillis() + (24 * 60 * 60 * 1000) // Expires in 24 hours
            )
        }
    }

    // Utility functions for notification management
    fun markAsRead(): NotificationItem {
        return this.copy(isRead = true)
    }

    fun markAsImportant(): NotificationItem {
        return this.copy(isImportant = true)
    }

    fun updatePriority(newPriority: Priority): NotificationItem {
        return this.copy(priority = newPriority)
    }

    fun addData(key: String, value: String): NotificationItem {
        val newData = data.toMutableMap()
        newData[key] = value
        return this.copy(data = newData)
    }

    fun removeData(key: String): NotificationItem {
        val newData = data.toMutableMap()
        newData.remove(key)
        return this.copy(data = newData)
    }

    fun extendExpiry(additionalMillis: Long): NotificationItem {
        val newExpiry = expiryTime?.let { it + additionalMillis } ?: (System.currentTimeMillis() + additionalMillis)
        return this.copy(expiryTime = newExpiry)
    }

    fun toSummaryString(): String {
        return "${type.displayName} | ${getFormattedTime()} | ${if (isRead) "ƒê√£ ƒë·ªçc" else "Ch∆∞a ƒë·ªçc"}"
    }

    fun toDetailString(): String {
        return buildString {
            appendLine("ID: $id")
            appendLine("Ti√™u ƒë·ªÅ: $title")
            appendLine("N·ªôi dung: $message")
            appendLine("Lo·∫°i: ${type.displayName} ${type.emoji}")
            appendLine("Th·ªùi gian: ${getDetailedTime()}")
            appendLine("ƒê·ªô ∆∞u ti√™n: ${priority.displayName}")
            appendLine("Tr·∫°ng th√°i: ${if (isRead) "ƒê√£ ƒë·ªçc" else "Ch∆∞a ƒë·ªçc"}")
            appendLine("Quan tr·ªçng: ${if (isImportant) "C√≥" else "Kh√¥ng"}")

            if (expiryTime != null) {
                appendLine("H·∫øt h·∫°n: ${getTimeUntilExpiry()}")
            }

            if (actionUrl != null) {
                appendLine("C√≥ h√†nh ƒë·ªông: $actionUrl")
            }

            if (data.isNotEmpty()) {
                appendLine("D·ªØ li·ªáu b·ªï sung:")
                data.forEach { (key, value) ->
                    appendLine("  $key: $value")
                }
            }
        }
    }
}